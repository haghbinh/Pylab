[
  {
    "objectID": "Notebooks/sec7_Data_Structures.html",
    "href": "Notebooks/sec7_Data_Structures.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس هفتم: ساختار داده‌ها در پایتون  &lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nساختار داده‌ها در پایتون: لیست‌ها (Lists)\n\n\nلیست‌ها یکی از پرکاربردترین ساختارهای داده در پایتون هستند. لیست‌ها مجموعه‌ای از عناصر هستند که می‌توانند از انواع مختلف داده تشکیل شده باشند. ویژگی مهم لیست‌ها این است که قابل تغییر (mutable) هستند و می‌توان عناصر آن‌ها را اضافه، حذف یا تغییر داد.\n\n\n۱. تعریف لیست\n\n\nلیست‌ها با استفاده از کروشه [] تعریف می‌شوند و عناصر با کاما جدا می‌شوند.\n\n\nnumbers = [1, 2, 3, 4, 5]\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmixed = [1, \"apple\", True, 3.14]\n\nprint(numbers)\nprint(fruits)\nprint(mixed)\n\n[1, 2, 3, 4, 5]\n['apple', 'banana', 'cherry']\n[1, 'apple', True, 3.14]\n\n\n\n۲. دسترسی به عناصر لیست\n\n\nبرای دسترسی به عناصر لیست از اندیس (index) استفاده می‌کنیم. اندیس‌ها از صفر شروع می‌شوند و می‌توان از اندیس منفی برای دسترسی از انتهای لیست استفاده کرد.\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])   # اولین عنصر\nprint(fruits[-1])  # آخرین عنصر\n\napple\ncherry\n\n\n\n۳. تغییر عناصر لیست\n\n\nمی‌توانیم عناصر لیست را مستقیماً تغییر دهیم:\n\n\nnumbers = [1, 2, 3]\nnumbers[1] = 20\nprint(numbers)  # [1, 20, 3]\n\n[1, 20, 3]\n\n\n\n۴. افزودن عناصر به لیست\n\n\nروش‌های مختلفی برای اضافه کردن عنصر به لیست وجود دارد:\n\n\nfruits = [\"apple\", \"banana\"]\n\n# اضافه کردن یک عنصر در انتهای لیست\nfruits.append(\"cherry\")\nprint(fruits)\n\n# اضافه کردن چند عنصر\nfruits.extend([\"orange\", \"kiwi\"])\nprint(fruits)\n\n# اضافه کردن عنصر در موقعیت مشخص\nfruits.insert(1, \"mango\")\nprint(fruits)\n\n['apple', 'banana', 'cherry']\n['apple', 'banana', 'cherry', 'orange', 'kiwi']\n['apple', 'mango', 'banana', 'cherry', 'orange', 'kiwi']\n\n\n\n۵. حذف عناصر از لیست\n\n\nfruits = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\n# حذف با نام عنصر\nfruits.remove(\"banana\")\nprint(fruits)\n\n# حذف با اندیس و دریافت مقدار حذف شده\nremoved = fruits.pop(1)\nprint(fruits)\nprint(\"Removed:\", removed)\n\n# حذف آخرین عنصر\nfruits.pop()\nprint(fruits)\n\n['apple', 'cherry', 'orange']\n['apple', 'orange']\nRemoved: cherry\n['apple']\n\n\n\n۶. بررسی وجود عنصر\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"apple\" in fruits)   # True\nprint(\"kiwi\" not in fruits) # True\n\nTrue\nTrue\n\n\n\n۷. طول لیست\n\n\nnumbers = [1, 2, 3, 4, 5]\nprint(len(numbers))  # 5\n\n5\n\n\n\n۸. حلقه روی لیست\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\napple\nbanana\ncherry\n\n\n\n۹. مرتب‌سازی و معکوس کردن\n\n\nnumbers = [5, 2, 9, 1, 7]\n\n# مرتب‌سازی صعودی\nnumbers.sort()\nprint(numbers)\n\n# مرتب‌سازی نزولی\nnumbers.sort(reverse=True)\nprint(numbers)\n\n# معکوس کردن لیست\nnumbers.reverse()\nprint(numbers)\n\n[1, 2, 5, 7, 9]\n[9, 7, 5, 2, 1]\n[1, 2, 5, 7, 9]\n\n\n\n۱۰. کپی و تکرار لیست\n\n\nfruits = [\"apple\", \"banana\"]\nfruits_copy = fruits.copy()\nprint(fruits_copy)\n\n# تکرار عناصر\nnumbers = [1, 2, 3] * 3\nprint(numbers)\n\n['apple', 'banana']\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n\n\n۱۱. لیست‌های تو در تو\n\n\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(matrix[0][1])  # 2\n\n2\n\n\n\n۱۲. تبدیل سایر داده‌ها به لیست\n\n\nstring = \"hello\"\nlist_from_string = list(string)\nprint(list_from_string)\n\ntuple_data = (1, 2, 3)\nlist_from_tuple = list(tuple_data)\nprint(list_from_tuple)\n\n['h', 'e', 'l', 'l', 'o']\n[1, 2, 3]\n\n\n\n۱۳. برش یا Slicing در لیست‌ها\n\n\nبا استفاده از Slicing می‌توانیم بخش خاصی از لیست را استخراج کنیم. قالب کلی به صورت list[start:stop:step] است:\n\n\nstart: اندیس شروع (شامل آن عنصر)\n\n\nstop: اندیس پایان (غیر شامل)\n\n\nstep: گام یا فاصله بین عناصر\n\n\n\n\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# استخراج عناصر از اندیس 2 تا 5 (شامل 2، 3، 4، 5)\nprint(numbers[2:6])\n\n# استخراج از ابتدا تا اندیس 4\nprint(numbers[:5])\n\n# استخراج از اندیس 5 تا انتها\nprint(numbers[5:])\n\n# استخراج همه عناصر با گام 2\nprint(numbers[::2])\n\n# معکوس کردن لیست با Slicing\nprint(numbers[::-1])\n\n[2, 3, 4, 5]\n[0, 1, 2, 3, 4]\n[5, 6, 7, 8, 9]\n[0, 2, 4, 6, 8]\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\n\nتمرین\n\n\n۱. لیستی از ۵ عدد بسازید و مجموع عناصر آن را محاسبه کنید.\n\n\n۲. برنامه‌ای بنویسید که از کاربر چند نام دریافت کند، آن‌ها را در یک لیست ذخیره کند و سپس چاپ نماید.\n\n\n۳. لیستی از اعداد داشته باشید. عناصر بزرگتر از ۵ را حذف کنید و لیست جدید را چاپ کنید.\n\n\n۴. یک لیست دو بعدی (matrix) بسازید و مجموع عناصر هر سطر را محاسبه کنید.\n\n\n۵. تابعی بنویسید که یک لیست طبیعی دریافت کند و مقادیر فرد آن را بصورت یک لیست برگرداند."
  },
  {
    "objectID": "Notebooks/sec5_Control_Flow.html",
    "href": "Notebooks/sec5_Control_Flow.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس پنجم: کنترل جریان  &lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nکنترل جریان (Control Flow)\n\n\nدر برنامه‌نویسی، کنترل جریان به تصمیم‌گیری و تکرار در اجرای دستورات گفته می‌شود. با استفاده از شرط‌ها، حلقه‌ها و دستورات break و continue می‌توان مسیر اجرای برنامه را کنترل کرد.\n\n\n۱. شرط‌ها (if, elif, else)\n\n\nبا دستور if می‌توانیم بر اساس یک شرط تصمیم بگیریم که بخش خاصی از کد اجرا شود. از elif و else برای بررسی شرایط دیگر یا حالت پیش‌فرض استفاده می‌کنیم.\n\n\nx = 15\n\nif x &gt; 20:\n    print(\"x is greater than 20\")\nelif x == 15:\n    print(\"x is exactly 15\")\nelse:\n    print(\"x is less than 15\")\n\nx is exactly 15\n\n\n\nConditional Expressions (Ternary Operator)\n\nx = eval(input('Enter an x: '))\nif x % 2 == 0:\n    x = x ** 2\nelse:\n    x = x ** 3\nprint(f'new x = {x}')\n\nEnter an x:  6\n\n\nnew x = 36\n\n\n\n# Using conditional expression (ternary operator)\nx = eval(input('Enter an x: '))\nx = x ** 2 if x % 2 == 0 else x ** 3\nprint(f'new x = {x}')\n\nEnter an x:  6\n\n\nnew x = 36\n\n\n\n۲. حلقه‌ها (Loops)\n\n\nدر پایتون دو نوع حلقه داریم: for و while. - حلقه for برای تکرار روی یک مجموعه (لیست، رشته، یا رنج عددی) استفاده می‌شود. - حلقه while تا زمانی که شرط برقرار است، اجرا می‌شود.\n\n\n# for loop example\nfor i in range(5):\n    print(\"Iteration:\", i)\n\n# while loop example\ncount = 0\nwhile count &lt; 3:\n    print(\"Count is\", count)\n    count += 1\n\nIteration: 0\nIteration: 1\nIteration: 2\nIteration: 3\nIteration: 4\nCount is 0\nCount is 1\nCount is 2\n\n\n\n۳. دستور break\n\n\nبا دستور break می‌توان اجرای حلقه را قبل از اتمام کامل آن متوقف کرد.\n\n\nfor i in range(10):\n    if i == 5:\n        break\n    print(\"Value:\", i)\n\nValue: 0\nValue: 1\nValue: 2\nValue: 3\nValue: 4\n\n\n\n۴. دستور continue\n\n\nبا دستور continue می‌توان اجرای حلقه را در همان تکرار متوقف کرد و به تکرار بعدی رفت.\n\n\nfor i in range(5):\n    if i == 2:\n        continue\n    print(\"Number:\", i)\n\nNumber: 0\nNumber: 1\nNumber: 3\nNumber: 4\n\n\n\nتمرین\n\n\n۱. برنامه‌ای بنویسید که عددی از کاربر دریافت کند و بررسی کند که عدد مثبت، منفی یا صفر است.\n\n\n۲. با استفاده از حلقه for، اعداد ۱ تا ۱۰ را چاپ کنید اما وقتی عدد ۷ رسید، حلقه را با break متوقف کنید.\n\n\n۳. با استفاده از حلقه while، اعداد ۰ تا ۵ را چاپ کنید اما اگر عدد ۳ شد، با continue آن را رد کنید و چاپ نشود."
  },
  {
    "objectID": "Notebooks/sec3_operators.html",
    "href": "Notebooks/sec3_operators.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس سوم: عملگرها در پایتون&lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nانواع عملگرها در پایتون\n\n\nدر برنامه‌نویسی، عملگرها (Operators) نمادهایی هستند که برای انجام عملیات خاصی روی داده‌ها استفاده می‌شوند. در پایتون عملگرهای مختلفی وجود دارند که به دسته‌های گوناگون تقسیم می‌شوند.\n\n\n۱. عملگرهای ریاضی (Arithmetic Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\n+\n\n\nجمع\n\n\n5 + 2 = 7\n\n\n\n\n-\n\n\nتفریق\n\n\n5 - 2 = 3\n\n\n\n\n*\n\n\nضرب\n\n\n5 * 2 = 10\n\n\n\n\n/\n\n\nتقسیم\n\n\n5 / 2 = 2.5\n\n\n\n\n%\n\n\nباقیمانده\n\n\n5 % 2 = 1\n\n\n\n\n**\n\n\nتوان\n\n\n5 ** 2 = 25\n\n\n\n\n//\n\n\nتقسیم صحیح\n\n\n5 // 2 = 2\n\n\n\n\na = 10\nb = 3\n\nprint(\"جمع:\", a + b)       # 13\nprint(\"تفریق:\", a - b)    # 7\nprint(\"ضرب:\", a * b)      # 30\nprint(\"تقسیم:\", a / b)    # 3.333...\nprint(\"باقیمانده:\", a % b)  # 1\nprint(\"توان:\", a ** b)    # 1000\nprint(\"تقسیم صحیح:\", a // b)  # 3\n\nجمع: 13\nتفریق: 7\nضرب: 30\nتقسیم: 3.3333333333333335\nباقیمانده: 1\nتوان: 1000\nتقسیم صحیح: 3\n\n\n\n۲. عملگرهای مقایسه‌ای (Comparison Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\n==\n\n\nمساوی\n\n\n5 == 5 → True\n\n\n\n\n!=\n\n\nنامساوی\n\n\n5 != 3 → True\n\n\n\n\n\n\n\nبزرگتر\n\n\n5 &gt; 3 → True\n\n\n\n\n&lt;\n\n\nکوچکتر\n\n\n5 &lt; 3 → False\n\n\n\n\n\n=\n\n\nبزرگتر یا مساوی\n\n\n5 &gt;= 5 → True\n\n\n\n\n&lt;=\n\n\nکوچکتر یا مساوی\n\n\n3 &lt;= 5 → True\n\n\n\n\n\n\nx = 5\ny = 10\nprint(x == y)\nprint(x &lt; y)\n\nFalse\nTrue\n\n\n\n۳. عملگرهای منطقی (Logical Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\nand\n\n\nو (هر دو درست باشند)\n\n\nTrue and False → False\n\n\n\n\nor\n\n\nیا (یکی درست باشد)\n\n\nTrue or False → True\n\n\n\n\nnot\n\n\nنفی\n\n\nnot True → False\n\n\n\n\na = True\nb = False\nprint(a and b)\nprint(not a)\n\nFalse\nFalse\n\n\n\n۴. عملگرهای انتسابی (Assignment Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\n=\n\n\nانتساب\n\n\nx = 5\n\n\n\n\n+=\n\n\nجمع و انتساب\n\n\nx += 3 → x = x + 3\n\n\n\n\n-=\n\n\nتفریق و انتساب\n\n\nx -= 2 → x = x - 2\n\n\n\n\n*=\n\n\nضرب و انتساب\n\n\nx = 2 → x = x  2\n\n\n\n\n/=\n\n\nتقسیم و انتساب\n\n\nx /= 2 → x = x / 2\n\n\n\n\nx = 10\nx += 5\nprint(x)\n\n15\n\n\n\n۵. عملگرهای عضویت (Membership Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\nin\n\n\nوجود داشتن\n\n\n3 in [1,2,3] → True\n\n\n\n\nnot in\n\n\nوجود نداشتن\n\n\n5 not in [1,2,3] → True\n\n\n\n\nlst = [1, 2, 3]\nprint(2 in lst)\nprint(4 not in lst)\n\nTrue\nTrue\n\n\n\n۶. عملگرهای بیتی (Bitwise Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\n&\n\n\nAND بیتی\n\n\n6 & 3 = 2\n\n\n\n\n|\n\n\nOR بیتی\n\n\n6 | 3 = 7\n\n\n\n\n^\n\n\nXOR بیتی\n\n\n6 ^ 3 = 5\n\n\n\n\n~\n\n\nNOT بیتی\n\n\n~6 = -7\n\n\n\n\n&lt;&lt;\n\n\nشیفت به چپ\n\n\n6 &lt;&lt; 1 = 12\n\n\n\n\n\n\n\n\nشیفت به راست\n\n\n6 &gt;&gt; 1 = 3\n\n\n\n\n\n\na = 6\nb = 3\nprint(a & b)\nprint(a &lt;&lt; 1)\n\n2\n12\n\n\n\nتمرین\n\n\n۱. برنامه‌ای بنویسید که از کاربر دو عدد دریافت کند و نتایج چهار عمل اصلی را نمایش دهد.\n\n\n۲. لیستی از اعداد بسازید و بررسی کنید که آیا عدد ۱۰ در آن وجود دارد یا خیر.\n\n\n۳. متغیری به نام x تعریف کنید و با استفاده از عملگرهای انتسابی مقدار آن را تغییر دهید.\n\n\n۴. دو عدد انتخاب کنید و عملیات بیتی (&، |، ^) را روی آن‌ها انجام دهید.\n\n```"
  },
  {
    "objectID": "index.html#پیشنیازها",
    "href": "index.html#پیشنیازها",
    "title": "برنامه‌نویسی پایتون",
    "section": "🛠 پیش‌نیازها",
    "text": "🛠 پیش‌نیازها\nبرای اجرای فایل‌ها از دستورات زیر استفاده کنید:\npip install -r requirements.txt"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site",
    "crumbs": [
      "Course information",
      "Overview"
    ]
  },
  {
    "objectID": "Notebooks/sec1_setup_intro.html",
    "href": "Notebooks/sec1_setup_intro.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس اول: معرفی و نصب پایتون &lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nپایتون چیست؟\n\n\nپایتون یک زبان برنامه‌نویسی ساده و قدرتمند است که برای ساخت برنامه‌های کاربردی و وب استفاده می‌شود. این زبان از نوع «شی‌گرا» و «سطح بالا» است، یعنی به کمک آن می‌توان خیلی راحت و سریع برنامه نوشت.\n\n\nیکی از ویژگی‌های مهم پایتون، ساده بودن دستورهای آن است. همین موضوع باعث شده یادگیری آن برای مبتدی‌ها بسیار آسان باشد. کسانی که با زبان‌های دیگر هم کار کرده‌اند، معمولاً پایتون را خواناتر و قابل‌فهم‌تر می‌دانند. این خوانایی بالا کمک می‌کند اعضای یک تیم راحت‌تر با هم همکاری کنند.\n\n\nدر پایتون می‌توان از «ماژول‌ها» و «پکیج‌ها» استفاده کرد. این یعنی کدی که یک‌بار نوشته می‌شود را می‌توان بارها در پروژه‌های مختلف استفاده کرد. این ویژگی باعث می‌شود زمان کمتری برای نوشتن برنامه‌های جدید صرف شود.\n\n\nاگر برنامه‌نویسی یک ماژول خاص بنویسد، دیگران هم می‌توانند از آن استفاده کنند. اضافه کردن (Import) یا خروجی گرفتن (Export) از این ماژول‌ها بسیار ساده است.\n\n\nپایتون یک مزیت خیلی بزرگ دارد: همه ابزارهای اصلی آن رایگان هستند! شما هم می‌توانید مفسر و هم کتابخانه‌های آن را رایگان روی هر سیستم‌عاملی نصب و استفاده کنید. این یعنی نیازی به خرید ابزارهای گران نیست.\n\n\nاگر حس می‌کنید مطالب بالا برایتان پیچیده بود، نگران نباشید. در ادامه، همه مفاهیم به‌صورت کامل و ساده توضیح داده می‌شود. فقط کافی است بدانید پایتون یک زبان ساده، رایگان و کاربردی است که با آن می‌توانید نرم‌افزارهای موبایل، وب و بسیاری برنامه‌های دیگر را بسازید. اگر وقت بگذارید، می‌توانید برنامه‌های خیلی خوبی با پایتون بنویسید.\n\n\nچرا پایتون محبوب است؟\n\n\nپایتون یکی از محبوب‌ترین زبان‌های برنامه‌نویسی دنیاست. اما فقط به خاطر درآمد بالا نیست. دلایل زیادی باعث شده افراد زیادی سراغ یادگیری و استفاده از پایتون بروند.\n\n\n۱. شرکت‌های بزرگ دنیا از پایتون استفاده می‌کنند: شرکت‌هایی مثل گوگل، یوتیوب، فیسبوک، ناسا، دراپ‌باکس، اینستاگرام و حتی IBM از پایتون در پروژه‌های خود استفاده می‌کنند. مثلاً گوگل از پایتون برای هوش مصنوعی و برنامه‌های ابری استفاده می‌کند. دراپ‌باکس هم بیشتر بخش‌های مختلف خودش را با پایتون ساخته است.\n\n\n  \n\n\n۲. کاربرد زیاد در یادگیری ماشین (Machine Learning): پایتون در حوزه‌ی علم داده و یادگیری ماشین بسیار محبوب است. بیشتر کتابخانه‌ها و ابزارهای هوش مصنوعی با پایتون ساخته شده‌اند. به همین دلیل کسانی که می‌خواهند وارد این حوزه شوند معمولاً از پایتون شروع می‌کنند.\n\n\n  \n\n\n۳. مناسب برای افراد مبتدی: اگر تازه می‌خواهید برنامه‌نویسی یاد بگیرید، پایتون انتخاب فوق‌العاده‌ای است. چون دستوراتش ساده است و سریع می‌توان نتیجه گرفت. همین باعث می‌شود یادگیری برای شما جذاب‌تر شود.\n\n\n۴. پایتون تقریباً برای همه‌چیز کاربرد دارد: با پایتون می‌توان برنامه‌های وب، اپلیکیشن‌های گرافیکی، تحلیل داده، اتوماسیون و خیلی چیزهای دیگر ساخت. یعنی اگر فقط پایتون بلد باشید، می‌توانید بیشتر پروژه‌ها را انجام دهید. این یکی از ویژگی‌های خاص این زبان است.\n\n\nویژگی‌های پایتون\n\n\nپایتون یک زبان برنامه‌نویسی پرقدرت است که می‌توان آن را با زبان‌هایی مثل پرل، روبی، پی‌اچ‌پی و جاوا مقایسه کرد. اما چیزی که پایتون را خاص می‌کند، سادگی و امکانات فراوان آن است. در ادامه، مهم‌ترین ویژگی‌های پایتون را با زبان ساده مرور می‌کنیم:\n\n\n\nخوانایی بالا: دستورهای پایتون ساده و شبیه زبان انسان هستند. برای مثال، اگر بخواهیم چیزی را چاپ کنیم، فقط کافی‌ست بنویسیم print. همین سادگی باعث می‌شود کدها راحت‌تر خوانده شوند.\n\n\nآسان برای شروع: پایتون زبانی ساده است و خیلی سریع می‌توان با آن برنامه نوشت. به همین دلیل برای ساخت نمونه‌های اولیه و پروژه‌های ساده بسیار مناسب است.\n\n\nکتابخانه‌های آماده: پایتون مجموعه بزرگی از کتابخانه‌های آماده دارد که کارهای مختلف مثل کار با فایل، جستجو، ساخت وب‌سایت و… را ساده می‌کنند. در بیشتر زبان‌ها باید این‌ها را خودتان بسازید.\n\n\nحالت تعاملی: شما می‌توانید کدهای کوتاه را در محیط تعاملی پایتون تست کنید. یک محیط برنامه‌نویسی ساده هم همراه با پایتون نصب می‌شود تا شروع کار برایتان راحت‌تر باشد.\n\n\nقابل توسعه: اگر نیاز به امکانات بیشتر دارید، می‌توانید با افزودن ماژول‌هایی که حتی با زبان‌هایی مثل C نوشته شده‌اند، پایتون را گسترش دهید.\n\n\nقابل استفاده در برنامه‌های دیگر: پایتون را می‌توان در دل برنامه‌های دیگر قرار داد تا کاربران آن برنامه‌ها بتوانند با پایتون کدنویسی کنند.\n\n\nسازگاری با همه سیستم‌عامل‌ها: پایتون روی ویندوز، لینوکس، مک و بیشتر سیستم‌ها قابل اجرا است و طوری طراحی شده که در همه جا تقریباً به یک شکل کار کند.\n\n\nکاملاً رایگان و متن‌باز: استفاده از پایتون هیچ هزینه‌ای ندارد. می‌توانید آن را آزادانه دانلود، ویرایش و استفاده کنید.\n\n\n\nراه‌اندازی محیط پایتون چگونه است؟\n\n\nیکی از مهم‌ترین موضوعات هنگام کار کردن با هر زبان برنامه‌نویسی «راه‌اندازی» (setup) یک «محیط توسعه» (Development Environment) برای آن است که امکان اجرای کدهای نوشته شده به آن زبان را می‌دهد. بدون این محیط توسعه، کاربر هرگز قادر به بررسی اینکه کدی که نوشته کار می‌کند یا نه و آیا دارای خطا است یا خیر، نخواهد بود.\n\n\n\n\n\nبرای زبان برنامه نویسی پایتون، به چیزی با عنوان «مفسر» (interpreter) نیز نیاز است که کد را تبدیل به آنچه می‌کند که برای کامپیوتر قابل خواندن و اجرا است (و در واقع کل برنامه نوشته شده را می‌سازد). برای تبدیل کد، ابتدا باید از «شِل پایتون» (Python shell) استفاده کرد که اغلب مفسر را از طریق چیزی که خط «بَنگ» (bang) نامیده می‌شود فراخوانی می‌کند.\n\n\nهمانطور که برای ساخت یک برنامه کاربری یا فایل دو راه وجود دارد، برای این کار نیز دو روش موجود است. می‌توان برنامه را با یک «ویرایش‌گر متن» (text editor) ساده مانند WordPad یا ++Notepad ساخت. همچنین، می‌توان برنامه را با استفاده از شل پایتون آماده کرد. مزایا و معایبی برای هر روش وجود دارد که در ادامه تشریح خواهند شد.\n\n\n\n\n\nنصب پایتون\n\n\nبرای نصب پایتون به وب‌سایت رسمی آن  www.python.org  بروید و نسخه‌ی آخر Python 3 را دانلود و نصب کنید.\n\n\n\n✔ در ویندوز، گزینه “Add Python to PATH” را فعال کنید.\n\n&lt;img src=\"images/win_installer.png\"&gt;\n\nپس از نصب، دستور زیر را برای اطمینان اجرا کنید. برای اینکار در پنجره ترمینال ویندوز تایپ کنید:\n\n\n\npython –version\n\nIDE چیست؟\n\n\nIDE مخفف عبارت محیط توسعه یکپارچه است. این ابزار نرم‌افزاری همه چیزهایی را که یک برنامه‌نویس برای نوشتن، اجرا، ویرایش و تست برنامه نیاز دارد، در یک محیط واحد در اختیار او قرار می‌دهد.\n\n\nبه زبان ساده، اگر بخواهیم برنامه‌ای بسازیم، باید قسمت‌های مختلفی مثل نوشتن کد، طراحی ظاهر برنامه، بررسی خطاها و اجرای برنامه را انجام دهیم. با استفاده از IDE می‌توان همه این کارها را در یک برنامه انجام داد و لازم نیست برای هر مرحله، ابزار جداگانه‌ای نصب کنیم.\n\n\nبسیاری از IDEها امکانات مفیدی مثل کد نویسی سریع‌تر، کامل کردن خودکار کد، اشکال‌زدایی (Debugging) و نمایش خطاها را دارند. این امکانات باعث می‌شوند نوشتن برنامه آسان‌تر و سریع‌تر شود.\n\n\nIDEها معمولاً دارای بخش‌های زیر هستند:\n\n\n\nویرایشگر کد (Code Editor)\n\n\nکامپایلر یا مفسر (برای اجرای کد)\n\n\nاشکال‌زدا (Debugger)\n\n\nابزارهای تکمیل خودکار و پیشنهاد کد\n\n\n\nبرخی IDEها فقط برای یک زبان خاص ساخته شده‌اند. مثلاً PyCharm برای پایتون یا IntelliJ برای جاوا. ولی بعضی دیگر مثل VS Code یا Eclipse برای چند زبان قابل استفاده‌اند.\n\n\nیکی از ویژگی‌های مهم IDEها این است که اگر در کد خطایی وجود داشته باشد، خیلی راحت آن را پیدا کرده و نشان می‌دهند. این کار به برنامه‌نویس کمک می‌کند سریع‌تر مشکلات را حل کند.\n\n\nدر پروژه‌های بزرگ و پیچیده، استفاده از IDE بسیار کاربردی‌تر از ویرایشگرهای ساده است. چون هم سرعت برنامه‌نویسی را بیشتر می‌کند و هم کدنویسی را مرتب و راحت‌تر می‌سازد.\n\n\nدر ادامه، تفاوت IDE و ویرایشگر متن را بررسی خواهیم کرد تا بدانیم کدام ابزار برای چه کاری مناسب‌تر است.\n\n\nمحبوب‌ترین محیط‌های توسعه (IDE) برای پایتون\n\n\nبرای برنامه‌نویسی با زبان پایتون، ابزارهای مختلفی وجود دارد که می‌توان از آن‌ها برای نوشتن، اجرا و تست کدها استفاده کرد. در این بخش، محبوب‌ترین IDEها و ویرایشگرهایی را که بیشتر برنامه‌نویسان پایتون استفاده می‌کنند معرفی می‌کنیم.\n\n\n\nJupyter Notebook: محیطی تحت وب، ساده و تعاملی. مخصوص آموزش، تحلیل داده و یادگیری مرحله‌به‌مرحله. خروجی کد و نمودارها را همان‌جا نشان می‌دهد.\n\n\nGoogle Colab: نسخه آنلاین Jupyter که نیاز به نصب ندارد. روی فضای ابری اجرا می‌شود و برای دانشجویان بسیار مناسب است. فقط با داشتن حساب Gmail قابل استفاده است.\n\n\nVisual Studio Code (VS Code): ویرایشگر سبک و حرفه‌ای که با نصب افزونه Python، به یک IDE کامل تبدیل می‌شود. مناسب برای پروژه‌های بزرگ‌تر.\n\n\nPyCharm: یک IDE قدرتمند مخصوص پایتون از شرکت JetBrains. نسخه رایگان (Community) و حرفه‌ای (Professional) دارد. برای پروژه‌های حرفه‌ای مناسب است و امکانات زیادی برای دیباگ، تست و مدیریت پروژه‌ها فراهم می‌کند.\n\n\nThonny: محیطی بسیار ساده و سبک، مخصوص مبتدی‌ها. اگر تازه‌کار هستید، Thonny بهترین گزینه برای شروع است.\n\n\nSpyder: مخصوص برنامه‌نویسان علمی و تحلیل‌گران داده. همراه Anaconda نصب می‌شود و برای کار با NumPy، Pandas و Matplotlib عالی است.\n\n\n\nهر کدام از این محیط‌ها نقاط قوت خاص خود را دارند. اگر تازه شروع کرده‌اید، پیشنهاد می‌شود با Jupyter Notebook یا Google Colab شروع کنید و سپس بر اساس نیاز، به محیط‌های پیشرفته‌تر مثل VS Code یا PyCharm مهاجرت کنید.\n\n\nJupyter Notebook چیست؟\n\n\nJupyter Notebook یک ابزار بسیار پرکاربرد و محبوب برای نوشتن و اجرای کدهای پایتون است. با استفاده از این ابزار، شما می‌توانید کد بنویسید، آن را اجرا کنید، نتیجه‌اش را ببینید و حتی توضیحاتی به‌صورت متن، تصویر یا فرمول‌های ریاضی در کنار آن اضافه کنید.\n\n\nJupyter مخصوصاً برای یادگیری برنامه‌نویسی، تحلیل داده‌ها و انجام پروژه‌های علمی و دانشگاهی بسیار مناسب است. چون به شما اجازه می‌دهد مرحله به مرحله کد بنویسید، اجرا کنید و همان‌جا نتیجه را ببینید.\n\n\nیک فایل Jupyter Notebook با پسوند .ipynb ذخیره می‌شود و هر فایل شامل چندین “سلول” است. در این سلول‌ها می‌توان کد، توضیح متنی (Markdown)، نمودار، تصویر یا خروجی برنامه را قرار داد.\n\n\n  \n\n\nویژگی‌های اصلی Jupyter Notebook:\n\n\n\nاجرا گام‌به‌گام: می‌توانید هر سلول را جداگانه اجرا کنید و نتیجه را همان‌جا ببینید.\n\n\nنمایش همزمان کد و توضیح: می‌توانید کنار هر کد، توضیح بنویسید که برای آموزش بسیار مفید است.\n\n\nپشتیبانی از نمودار و تصویر: خروجی‌هایی مثل جدول و نمودار را می‌توانید مستقیم ببینید.\n\n\nمحیط تحت مرورگر: Jupyter در مرورگر اجرا می‌شود و نیازی به نصب نرم‌افزار گرافیکی جداگانه ندارد.\n\n\n\nبرای استفاده از Jupyter دو راه اصلی وجود دارد:\n\n\n\nاستفاده از Google Colab: یک محیط آنلاین رایگان از گوگل که نیاز به نصب ندارد و تنها با یک حساب Gmail قابل استفاده است.\n\n\nنصب روی کامپیوتر شخصی: می‌توانید با نصب Anaconda یا با استفاده از pip، Jupyter را روی سیستم خود اجرا کنید.\n\n\n\nJupyter Notebook یکی از بهترین ابزارها برای دانشجویانی است که می‌خواهند پایتون را همراه با تمرین و پروژه یاد بگیرند. در این دوره آموزشی، ما از این ابزار برای حل تمرین‌ها، آموزش مفاهیم و انجام پروژه‌ها استفاده خواهیم کرد.\n\n\nنصب Jupyter Notebook\n\n\nبرای نصب Jupyter از دستور زیر در ترمینال استفاده کنید:\n\npip install notebook\njupyter-lab\n\nVisual Studio Code چیست؟\n\n\nVisual Studio Code یا به اختصار VS Code، یک ویرایشگر کد بسیار محبوب و پرکاربرد است که توسط شرکت مایکروسافت ساخته شده است. این ابزار رایگان و سبک است و روی ویندوز، مک و لینوکس قابل نصب است.\n\n\nVS Code از بیشتر زبان‌های برنامه‌نویسی مانند Python، JavaScript، C++، HTML و بسیاری دیگر پشتیبانی می‌کند. با نصب افزونه‌ها (Extensions) می‌توانید امکانات آن را برای هر زبان توسعه دهید.\n\n\nدر دوره آموزش پایتون، از VS Code به‌عنوان یکی از ابزارهای اصلی برای نوشتن، اجرای کد و ساخت پروژه‌های واقعی استفاده خواهیم کرد.\n\n\nویژگی‌های اصلی VS Code:\n\n\n\nسبک و سریع: اجرای سریع و مناسب برای کامپیوترهای ضعیف‌تر\n\n\nتکمیل خودکار کد (Auto-complete): پیشنهاد کدها هنگام نوشتن\n\n\nاشکال‌زدایی (Debugging): امکان بررسی و پیدا کردن خطاها در کد\n\n\nامکان نصب افزونه‌ها: برای اضافه کردن امکانات بیشتر مانند اجرای کد پایتون، کنترل نسخه (Git)، یا قالب‌بندی کد\n\n\nپشتیبانی از فارسی: با نصب افزونه‌های لازم، منوی فارسی و کدنویسی راست‌چین نیز ممکن است\n\n\n\nبرای نوشتن برنامه‌های پایتون با VS Code، تنها کافی است:\n\n\n\nVS Code را از سایت رسمی code.visualstudio.com دانلود و نصب کنید.\n\n\nافزونه Python را از بخش Extensions نصب کنید.\n\n\nدر صورت نیاز، Python را نیز روی سیستم خود نصب کنید.\n\n\n\nاگر به دنبال محیطی ساده ولی حرفه‌ای برای برنامه‌نویسی هستید، VS Code یک انتخاب عالی است. با آن می‌توانید پروژه‌های واقعی پایتون را مدیریت و اجرا کنید.\n\n\n\nنصب VS Code\n\n\nبرای کدنویسی بهتر، Visual Studio Code را از اینجا نصب کنید و افزونه Python را فعال نمایید. نرم‌افزار Virtual Studio Code، محیطی عالی و یکپارچه را برای توسعه کدهای پایتون فراهم کرده است. کار با این نرم‌افزار ساده‌ است و همراه خود ویژگی‌های درونی زیادی را ارائه می‌دهد که باعث ارتقای کیفیت تجربه برنامه نویسی و توسعه‌دهندگی می‌شود.\n\n\n  \n\n\n\n\nساختار فایل‌های پایتون\n\n\nدو فرمت اصلی:\n\n\n\n.py برای فایل‌های متنی ساده\n\n\n.ipynb برای نوت‌بوک‌های تعاملی\n\n\n\n\n# hello.py\nname = input(\"نام شما چیست؟ \")\nprint(f\"سلام {name}!\")\n\nنام شما چیست؟  Hossein\nسلام Hossein!\n\n\n\nx = 10\ny = 7\n\n\nx + y\n\n17\n\n\n\n\n🎯 جمع‌بندی\n\n\n\n✔ نصب Python و VS Code\n\n\n✔ آشنایی با Jupyter و Google Colab\n\n\n✔ اجرای اولین کد پایتون"
  },
  {
    "objectID": "Notebooks/sec4_input_output.html",
    "href": "Notebooks/sec4_input_output.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس چهارم: ورودی‌ها و خروجی‌ها در پایتون&lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nدر برنامه‌نویسی، یکی از مهم‌ترین بخش‌ها ورودی و خروجی است. ما باید بتوانیم از کاربر داده دریافت کنیم و نتیجه را به او نمایش دهیم. در پایتون چند روش ساده برای انجام این کار وجود دارد.\n\n\n۱. تابع input()\n\n\nتابع input() برای دریافت داده از کاربر استفاده می‌شود. هر چیزی که کاربر وارد کند به صورت رشته (string) دریافت می‌شود.\n\n\nname = input(\"لطفاً نام خود را وارد کنید: \")\nprint(\"سلام،\", name)\n\nلطفاً نام خود را وارد کنید:  حسین\n\n\nسلام، حسین\n\n\n\nاگر بخواهیم عدد دریافت کنیم، باید رشته را به نوع عددی تبدیل کنیم:\n\n\nage = int(input(\"سن خود را وارد کنید: \"))\nprint(\"شما\", age, \"سال دارید.\")\n\nسن خود را وارد کنید:  44\n\n\nشما 44 سال دارید.\n\n\n\n۲. تابع print()\n\n\nتابع print() برای نمایش خروجی در کنسول استفاده می‌شود. می‌توان چند مقدار را با کاما جدا کرد یا متن و متغیر را با هم چاپ کرد.\n\n\na = 5\nb = 10\nprint(\"جمع a و b برابر است با:\", a + b)\n\nجمع a و b برابر است با: 15\n\n\n\n۳. f-string\n\n\nاز نسخه‌ی پایتون ۳.۶ به بعد، می‌توانیم از f-string برای ترکیب متن و متغیرها به صورت ساده و خوانا استفاده کنیم.\n\n\nname = \"علی\"\nage = 25\nprint(f\"سلام {name}! شما {age} ساله هستید.\")\n\nسلام علی! شما 25 ساله هستید.\n\n\n\n۴. متد format()\n\n\nروش قدیمی‌تر برای درج متغیر در متن، استفاده از متد format() است.\n\n\nname = \"زهرا\"\nage = 30\nprint(\"سلام {}! شما {} ساله هستید.\".format(name, age))\n\nسلام زهرا! شما 30 ساله هستید.\n\n\n\nتمرین\n\n\n۱. برنامه‌ای بنویسید که نام و سن کاربر را دریافت کند و پیامی مانند “سلام [نام]! شما [سن] ساله هستید.” چاپ کند.\n\n\n۲. برنامه‌ای بسازید که دو عدد از کاربر دریافت کرده و مجموع آن‌ها را نمایش دهد.\n\n\n۳. از f-string و متد format() برای نمایش یک جمله با حداقل دو متغیر مختلف استفاده کنید و خروجی را مقایسه کنید."
  },
  {
    "objectID": "Notebooks/sec6_Functions.html",
    "href": "Notebooks/sec6_Functions.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس ششم: تعریف توابع  &lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nتوابع در پایتون (Functions)\n\n\nتوابع بخش‌های مستقلی از کد هستند که یک کار مشخص را انجام می‌دهند. استفاده از توابع باعث می‌شود کد قابل فهم‌تر، کوتاه‌تر و قابل استفاده مجدد باشد.\n\n\n۱. تعریف تابع\n\n\nبرای تعریف تابع از کلمه کلیدی def استفاده می‌کنیم و پس از آن نام تابع و پرانتزهای پارامترها را می‌نویسیم. بدنه تابع با یک indentation مشخص می‌شود.\n\n\ndef greet():\n    print(\"Hello, welcome to Python functions!\")\n    \ngreet()\n\nHello, welcome to Python functions!\n\n\n\n۲. پارامترها (Parameters)\n\n\nتوابع می‌توانند داده‌هایی را به عنوان ورودی دریافت کنند. این داده‌ها پارامتر نامیده می‌شوند.\n\n\ndef greet_user(name):\n    print(f\"Hello, {name}!\")\n    \ngreet_user(\"Ali\")\ngreet_user(\"Zahra\")\n\nHello, Ali!\nHello, Zahra!\n\n\n\n۳. مقدار بازگشتی (Return Value)\n\n\nتوابع می‌توانند مقداری را به برنامه بازگردانند. برای این کار از دستور return استفاده می‌کنیم.\n\n\ndef add(a, b):\n    return a + b\n\nresult = add(5, 7)\nprint(\"Sum is:\", result)\n\nSum is: 12\n\n\n\n۴. استفاده از ماژول math\n\n\nپایتون کتابخانه‌ای به نام math دارد که توابع ریاضی مختلفی مانند توان، ریشه دوم، سینوس و کسینوس ارائه می‌دهد.\n\n\nimport math\n\nprint(\"Square root of 16 is:\", math.sqrt(16))\nprint(\"Cosine of 0 is:\", math.cos(0))\nprint(\"Value of pi:\", math.pi)\nprint(\"2 raised to 3:\", math.pow(2, 3))\n\nSquare root of 16 is: 4.0\nCosine of 0 is: 1.0\nValue of pi: 3.141592653589793\n2 raised to 3: 8.0\n\n\n\nتمرین\n\n\n۱. تابعی بنویسید که نام و سن کاربر را دریافت کند و پیامی مانند “سلام [نام]! شما [سن] ساله هستید.” چاپ کند.\n\n\n۲. تابعی بنویسید که دو عدد را به عنوان ورودی بگیرد و جمع، تفریق و ضرب آن‌ها را بازگرداند.\n\n\n۳. از ماژول math استفاده کنید تا تابعی بسازید که ریشه دوم یک عدد و توان آن را محاسبه کند و چاپ نماید."
  },
  {
    "objectID": "Notebooks/sec9_Data_Structures_Dictionaries.html",
    "href": "Notebooks/sec9_Data_Structures_Dictionaries.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس نهم: ساختار داده‌ها در پایتون  &lt;/h3&gt; \n                &lt;h4&gt;دیکشنری‌ها  &lt;/h4&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nساختار داده‌ها در پایتون: دیکشنری‌ها (Dictionaries)\n\n\nدیکشنری‌ها یکی از پرکاربردترین ساختارهای داده‌ای در پایتون هستند.\nهر دیکشنری شامل کلید (Key) و مقدار (Value) است.\nویژگی مهم دیکشنری‌ها این است که کلیدها یکتا هستند و به وسیله کلیدها به مقادیر دسترسی پیدا می‌کنیم.\n\n\n۱. ایجاد دیکشنری\n\n\nبرای تعریف دیکشنری از آکولاد {} استفاده می‌کنیم و هر کلید با مقدار مربوطه با دو نقطه : جدا می‌شود.\n\n\n# Creating dictionaries\nstudent = {\"name\": \"Ali\", \"age\": 20, \"major\": \"Physics\"}\ngrades = {\"math\": 18, \"physics\": 19, \"chemistry\": 17}\n\nprint(student)\nprint(grades)\n\n{'name': 'Ali', 'age': 20, 'major': 'Physics'}\n{'math': 18, 'physics': 19, 'chemistry': 17}\n\n\n\n۲. دسترسی به مقادیر\n\n\nبرای دسترسی به مقدار مربوط به یک کلید از [key] یا متد get() استفاده می‌کنیم.\n\n\nstudent = {\"name\": \"Ali\", \"age\": 20, \"major\": \"Physics\"}\n\nprint(student[\"name\"])      # Ali\nprint(student.get(\"age\"))   # 20\n\nAli\n20\n\n\n\n۳. اضافه کردن و تغییر مقادیر\n\n\nمی‌توانیم یک کلید جدید اضافه کنیم یا مقدار یک کلید موجود را تغییر دهیم.\n\n\nstudent = {\"name\": \"Ali\", \"age\": 20}\n\n# Adding a new key\nstudent[\"major\"] = \"Physics\"\nprint(student)\n\n# Modifying an existing key\nstudent[\"age\"] = 21\nprint(student)\n\n{'name': 'Ali', 'age': 20, 'major': 'Physics'}\n{'name': 'Ali', 'age': 21, 'major': 'Physics'}\n\n\n\n۴. حذف عناصر\n\n\nبرای حذف عناصر از del یا pop استفاده می‌کنیم.\n\n\nstudent = {\"name\": \"Ali\", \"age\": 21, \"major\": \"Physics\"}\n\n# Remove by key\ndel student[\"major\"]\nprint(student)\n\n# Remove and return value\nage = student.pop(\"age\")\nprint(student)\nprint(\"Removed age:\", age)\n\n{'name': 'Ali', 'age': 21}\n{'name': 'Ali'}\nRemoved age: 21\n\n\n\n۵. حلقه روی دیکشنری\n\n\nمی‌توانیم روی کلیدها، مقادیر یا هر دو با هم حلقه بزنیم.\n\n\ngrades = {\"math\": 18, \"physics\": 19, \"chemistry\": 17}\n\n# Loop over keys\nfor subject in grades:\n    print(subject)\n\n# Loop over values\nfor score in grades.values():\n    print(score)\n\n# Loop over key-value pairs\nfor subject, score in grades.items():\n    print(subject, \"-&gt;\", score)\n\nmath\nphysics\nchemistry\n18\n19\n17\nmath -&gt; 18\nphysics -&gt; 19\nchemistry -&gt; 17\n\n\n\n۶. توابع و متدهای مفید\n\n\nدیکشنری‌ها متدهای متعددی دارند که بسیار مفید هستند.\n\n\nstudent = {\"name\": \"Ali\", \"age\": 21, \"major\": \"Physics\"}\n\nprint(student.keys())    # List of keys\nprint(student.values())  # List of values\nprint(student.items())   # List of (key, value) tuples\nprint(len(student))      # Number of items\n\ndict_keys(['name', 'age', 'major'])\ndict_values(['Ali', 21, 'Physics'])\ndict_items([('name', 'Ali'), ('age', 21), ('major', 'Physics')])\n3\n\n\n\nتمرین\n\n\n۱. یک دیکشنری شامل نام و سن چند نفر بسازید و تعداد افراد را چاپ کنید.\n\n\n۲. دیکشنری‌ای بسازید و یک کلید جدید با مقدار دلخواه اضافه کنید.\n\n\n۳. دیکشنری‌ای بسازید و یک کلید مشخص را حذف کنید و مقدار آن را چاپ کنید.\n\n\n۴. دیکشنری‌ای بسازید و با استفاده از حلقه، کلیدها و مقادیر را جداگانه چاپ کنید.\n\n\n۵. یک دیکشنری بسازید و با استفاده از متدهای keys، values و items آن را بررسی کنید."
  },
  {
    "objectID": "Notebooks/sec7_Data_Structures_list.html",
    "href": "Notebooks/sec7_Data_Structures_list.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;\n            درس هفتم: ساختار داده‌ها در پایتون  &lt;/h3&gt;  \n           &lt;h4&gt; لیست‌ها  &lt;/h4&gt;\n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nساختار داده‌ها در پایتون: لیست‌ها (Lists)\n\n\nلیست‌ها یکی از پرکاربردترین ساختارهای داده در پایتون هستند. لیست‌ها مجموعه‌ای از عناصر هستند که می‌توانند از انواع مختلف داده تشکیل شده باشند. ویژگی مهم لیست‌ها این است که قابل تغییر (mutable) هستند و می‌توان عناصر آن‌ها را اضافه، حذف یا تغییر داد.\n\n\n۱. تعریف لیست\n\n\nلیست‌ها با استفاده از کروشه [] تعریف می‌شوند و عناصر با کاما جدا می‌شوند.\n\n\nnumbers = [1, 2, 3, 4, 5]\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmixed = [1, \"apple\", True, 3.14]\n\nprint(numbers)\nprint(fruits)\nprint(mixed)\n\n[1, 2, 3, 4, 5]\n['apple', 'banana', 'cherry']\n[1, 'apple', True, 3.14]\n\n\n\n۲. دسترسی به عناصر لیست\n\n\nبرای دسترسی به عناصر لیست از اندیس (index) استفاده می‌کنیم. اندیس‌ها از صفر شروع می‌شوند و می‌توان از اندیس منفی برای دسترسی از انتهای لیست استفاده کرد.\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])   # اولین عنصر\nprint(fruits[-1])  # آخرین عنصر\n\napple\ncherry\n\n\n\n۳. تغییر عناصر لیست\n\n\nمی‌توانیم عناصر لیست را مستقیماً تغییر دهیم:\n\n\nnumbers = [1, 2, 3]\nnumbers[1] = 20\nprint(numbers)  # [1, 20, 3]\n\n[1, 20, 3]\n\n\n\n۴. افزودن عناصر به لیست\n\n\nروش‌های مختلفی برای اضافه کردن عنصر به لیست وجود دارد:\n\n\nfruits = [\"apple\", \"banana\"]\n\n# اضافه کردن یک عنصر در انتهای لیست\nfruits.append(\"cherry\")\nprint(fruits)\n\n# اضافه کردن چند عنصر\nfruits.extend([\"orange\", \"kiwi\"])\nprint(fruits)\n\n# اضافه کردن عنصر در موقعیت مشخص\nfruits.insert(1, \"mango\")\nprint(fruits)\n\n['apple', 'banana', 'cherry']\n['apple', 'banana', 'cherry', 'orange', 'kiwi']\n['apple', 'mango', 'banana', 'cherry', 'orange', 'kiwi']\n\n\n\n۵. حذف عناصر از لیست\n\n\nfruits = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\n# حذف با نام عنصر\nfruits.remove(\"banana\")\nprint(fruits)\n\n# حذف با اندیس و دریافت مقدار حذف شده\nremoved = fruits.pop(1)\nprint(fruits)\nprint(\"Removed:\", removed)\n\n# حذف آخرین عنصر\nfruits.pop()\nprint(fruits)\n\n['apple', 'cherry', 'orange']\n['apple', 'orange']\nRemoved: cherry\n['apple']\n\n\n\n۶. بررسی وجود عنصر\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"apple\" in fruits)   # True\nprint(\"kiwi\" not in fruits) # True\n\nTrue\nTrue\n\n\n\n۷. طول لیست\n\n\nnumbers = [1, 2, 3, 4, 5]\nprint(len(numbers))  # 5\n\n5\n\n\n\n۸. حلقه روی لیست\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\napple\nbanana\ncherry\n\n\n\n۹. مرتب‌سازی و معکوس کردن\n\n\nnumbers = [5, 2, 9, 1, 7]\n\n# مرتب‌سازی صعودی\nnumbers.sort()\nprint(numbers)\n\n# مرتب‌سازی نزولی\nnumbers.sort(reverse=True)\nprint(numbers)\n\n# معکوس کردن لیست\nnumbers.reverse()\nprint(numbers)\n\n[1, 2, 5, 7, 9]\n[9, 7, 5, 2, 1]\n[1, 2, 5, 7, 9]\n\n\n\n۱۰. کپی و تکرار لیست\n\n\nfruits = [\"apple\", \"banana\"]\nfruits_copy = fruits.copy()\nprint(fruits_copy)\n\n# تکرار عناصر\nnumbers = [1, 2, 3] * 3\nprint(numbers)\n\n['apple', 'banana']\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n\n\n۱۱. لیست‌های تو در تو\n\n\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(matrix[0][1])  # 2\n\n2\n\n\n\n۱۲. تبدیل سایر داده‌ها به لیست\n\n\nstring = \"hello\"\nlist_from_string = list(string)\nprint(list_from_string)\n\ntuple_data = (1, 2, 3)\nlist_from_tuple = list(tuple_data)\nprint(list_from_tuple)\n\n['h', 'e', 'l', 'l', 'o']\n[1, 2, 3]\n\n\n\n۱۳. برش یا Slicing در لیست‌ها\n\n\nبا استفاده از Slicing می‌توانیم بخش خاصی از لیست را استخراج کنیم. قالب کلی به صورت list[start:stop:step] است:\n\n\nstart: اندیس شروع (شامل آن عنصر)\n\n\nstop: اندیس پایان (غیر شامل)\n\n\nstep: گام یا فاصله بین عناصر\n\n\n\n\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# استخراج عناصر از اندیس 2 تا 5 (شامل 2، 3، 4، 5)\nprint(numbers[2:6])\n\n# استخراج از ابتدا تا اندیس 4\nprint(numbers[:5])\n\n# استخراج از اندیس 5 تا انتها\nprint(numbers[5:])\n\n# استخراج همه عناصر با گام 2\nprint(numbers[::2])\n\n# معکوس کردن لیست با Slicing\nprint(numbers[::-1])\n\n[2, 3, 4, 5]\n[0, 1, 2, 3, 4]\n[5, 6, 7, 8, 9]\n[0, 2, 4, 6, 8]\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\n\nتمرین\n\n\n۱. لیستی از ۵ عدد بسازید و مجموع عناصر آن را محاسبه کنید.\n\n\n۲. برنامه‌ای بنویسید که از کاربر چند نام دریافت کند، آن‌ها را در یک لیست ذخیره کند و سپس چاپ نماید.\n\n\n۳. لیستی از اعداد داشته باشید. عناصر بزرگتر از ۵ را حذف کنید و لیست جدید را چاپ کنید.\n\n\n۴. یک لیست دو بعدی (matrix) بسازید و مجموع عناصر هر سطر را محاسبه کنید.\n\n\n۵. تابعی بنویسید که یک لیست طبیعی دریافت کند و مقادیر فرد آن را بصورت یک لیست برگرداند."
  },
  {
    "objectID": "Notebooks/sec2_Data_Types.html",
    "href": "Notebooks/sec2_Data_Types.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس دوم: متغیرها و انواع داده در پایتون&lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nدر این درس با مفهوم متغیرها و انواع داده پایه در پایتون آشنا می‌شویم.\n\n\n\n\n\n\nمتغیر چیست؟\n\n\nمتغیر (Variable) محفظه‌ای است برای نگهداری داده‌ها. در پایتون، نیازی به تعیین نوع متغیر نیست و نوع آن به صورت خودکار با توجه به مقدار تعیین می‌شود.\n\n\nx = 5        # عدد صحیح (int)\npi = 3.14    # عدد اعشاری (float)\nname = 'Ali' # رشته (string)\nflag = True  # مقدار بولی (bool)\n\nprint(x, pi, name, flag)\n\n5 3.14 Ali True\n\n\n\nبررسی نوع داده\n\n\nبرای بررسی نوع یک متغیر می‌توان از تابع type استفاده کرد:\n\n\nprint(type(x))\nprint(type(pi))\nprint(type(name))\nprint(type(flag))\n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'str'&gt;\n&lt;class 'bool'&gt;\n\n\n\nانواع داده عددی در پایتون\n\n\na = 10       # int\nb = 3.5      # float\nc = 1 + 2j   # complex\n\nprint(type(a), type(b), type(c))\n\n&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'complex'&gt;\n\n\n\nرشته‌ها (Strings)\n\n\nرشته‌ها مجموعه‌ای از کاراکترها هستند که در داخل کوتیشن (’’ یا ““) قرار می‌گیرند.\n\n\ntext = \"Hello\"\nprint(text)\nprint(text.upper())\nprint(text.lower())\nprint(text[0])\n\nHello\nHELLO\nhello\nH\n\n\n\nمقادیر بولی (Boolean)\n\n\nنوع bool دو مقدار دارد: True و False. این نوع در تصمیم‌گیری‌ها و شرط‌ها استفاده می‌شود.\n\n\na = 10\nb = 5\nprint(a &gt; b)    # True\nprint(a == b)   # False\n\nTrue\nFalse\n\n\n\nپویایی نوع داده در پایتون\n\n\nدر پایتون می‌توان مقدار یک متغیر را در هر زمان تغییر داد و نوع آن نیز به‌روزرسانی خواهد شد.\n\n\nx = 42\nprint(type(x))\nx = 'Now I am a string!'\nprint(type(x))\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\nتمرین 📝\n\n\nیک اسکریپت بنویسید که موارد زیر را انجام دهد:\n\n\n\nاز کاربر یک عدد صحیح دریافت کند.\n\n\nاز کاربر یک عدد اعشاری دریافت کند.\n\n\nاز کاربر یک رشته (نام کاربر) دریافت کند.\n\n\nنوع داده هر ورودی را با استفاده از تابع type چاپ کند.\n\n\n\nدر نهایت مقدار عدد صحیح را با عدد اعشاری جمع کرده و همراه با نام کاربر چاپ کنید."
  },
  {
    "objectID": "Notebooks/sec25_Tkinter_3.html",
    "href": "Notebooks/sec25_Tkinter_3.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و پنجم: رابط کاربری گرافیکی 3     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nویجت‌های پیشرفته در Tkinter: Listbox، Combobox و Scrollbar\n\n\nدر برنامه‌های GUI بزرگ، گاهی نیاز به انتخاب از لیست طولانی، یا پیمایش محتوا داریم. Tkinter ویجت‌های پیشرفته‌ای برای این موارد دارد:\n\n\nListbox: نمایش لیستی از آیتم‌ها و انتخاب یک یا چند مورد.\n\n\nCombobox: یک منوی کشویی برای انتخاب یک گزینه.\n\n\nScrollbar: پیمایشگر برای Listbox یا Text.\n\n\n\n\n۱. Listbox و Scrollbar\n\n\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"Listbox با Scrollbar\")\nroot.geometry(\"300x250\")\n\n# ایجاد Scrollbar\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=\"right\", fill=\"y\")\n\n# ایجاد Listbox\nlistbox = tk.Listbox(root, yscrollcommand=scrollbar.set)\nfor item in range(1, 21):\n    listbox.insert(\"end\", f\"آیتم {item}\")\nlistbox.pack(pady=20)\n\n# اتصال Scrollbar به Listbox\nscrollbar.config(command=listbox.yview)\n\nroot.mainloop()\n\n\nدر این مثال، با Scrollbar می‌توان لیست طولانی را پیمایش کرد و انتخاب آیتم‌ها با Listbox انجام می‌شود.\n\n\n۲. Combobox\n\n\nimport tkinter as tk\nfrom tkinter import ttk\n\nroot = tk.Tk()\nroot.title(\"Combobox مثال\")\nroot.geometry(\"300x150\")\n\ndef show_selection(event):\n    label_result.config(text=f\"انتخاب شما: {combo.get()}\")\n\n# Combobox\ncombo = ttk.Combobox(root, values=[\"گزینه ۱\", \"گزینه ۲\", \"گزینه ۳\"])\ncombo.pack(pady=20)\ncombo.bind(\"&lt;&lt;ComboboxSelected&gt;&gt;\", show_selection)\n\nlabel_result = tk.Label(root, text=\"\")\nlabel_result.pack()\n\nroot.mainloop()\n\n\nCombobox برای انتخاب از یک منوی کشویی مناسب است و با رویداد &lt;&lt;ComboboxSelected&gt;&gt; می‌توان انتخاب کاربر را مدیریت کرد.\n\n\n۳. ترکیب ویجت‌ها برای یک فرم پیشرفته\n\n\nimport tkinter as tk\nfrom tkinter import ttk\n\nroot = tk.Tk()\nroot.title(\"فرم پیشرفته\")\nroot.geometry(\"400x300\")\n\ntk.Label(root, text=\"انتخاب محصول:\").pack(pady=5)\ncombo_product = ttk.Combobox(root, values=[\"Laptop\", \"Phone\", \"Tablet\"])\ncombo_product.pack(pady=5)\n\ntk.Label(root, text=\"لیست موجودی:\").pack(pady=5)\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=\"right\", fill=\"y\")\n\nlistbox_inventory = tk.Listbox(root, yscrollcommand=scrollbar.set)\nfor i in range(1, 31):\n    listbox_inventory.insert(\"end\", f\"محصول شماره {i}\")\nlistbox_inventory.pack(pady=5)\n\nscrollbar.config(command=listbox_inventory.yview)\n\ndef show_selection():\n    selected = combo_product.get()\n    label_result.config(text=f\"محصول انتخابی: {selected}\")\n\ntk.Button(root, text=\"نمایش انتخاب\", command=show_selection).pack(pady=10)\nlabel_result = tk.Label(root, text=\"\")\nlabel_result.pack()\n\nroot.mainloop()\n\n\nتمرین\n\n\n۱. یک پنجره بسازید و Listbox با حداقل ۱۵ آیتم اضافه کنید.\n\n\n۲. یک Scrollbar به Listbox متصل کنید تا لیست قابل پیمایش باشد.\n\n\n۳. یک Combobox با ۵ گزینه ایجاد کنید و انتخاب آن را در یک Label نمایش دهید.\n\n\n۴. یک دکمه بسازید که آیتم انتخاب شده از Combobox را به Listbox اضافه کند.\n\n\n۵. ترکیبی از Listbox، Combobox و Scrollbar بسازید تا یک فرم تعاملی کامل ایجاد شود."
  },
  {
    "objectID": "Notebooks/sec23_Tkinter_1.html",
    "href": "Notebooks/sec23_Tkinter_1.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و سوم: رابط کاربری گرافیکی 1     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nمقدمه‌ای بر GUI در پایتون با Tkinter\n\n\nTkinter کتابخانه استاندارد پایتون برای ساخت برنامه‌های گرافیکی (GUI) است. با Tkinter می‌توان پنجره‌ها، دکمه‌ها، لیبل‌ها، فیلدهای متنی و دیگر ویجت‌ها را ایجاد کرد و تعامل با کاربر را پیاده‌سازی نمود.\n\n\nبخش ۱: ایجاد پنجره ساده\n\n\nبرای شروع، ابتدا Tkinter را وارد کرده و یک پنجره ساده ایجاد می‌کنیم.\n\n\nimport tkinter as tk\n\n# ایجاد پنجره اصلی\nroot = tk.Tk()\nroot.title(\"پنجره ساده\")\nroot.geometry(\"300x200\")  # عرض 300 و ارتفاع 200\n\n# نمایش پنجره\nroot.mainloop()\n\n\nدر کد بالا:\n\n\nTk() پنجره اصلی را ایجاد می‌کند.\n\n\ntitle() عنوان پنجره را مشخص می‌کند.\n\n\ngeometry() اندازه پنجره را تعیین می‌کند.\n\n\nmainloop() باعث می‌شود پنجره در حالت اجرا باقی بماند.\n\n\n\n\nبخش ۲: ویجت‌ها و تعامل با کاربر\n\n\nویجت‌ها عناصر گرافیکی پنجره هستند، مثل لیبل، دکمه و فیلد متنی. می‌توانیم با آن‌ها تعامل داشته باشیم.\n\n\nimport tkinter as tk\n\ndef greet():\n    name = entry_name.get()\n    label_result.config(text=f\"سلام {name}!\")\n\nroot = tk.Tk()\nroot.title(\"تعامل با کاربر\")\nroot.geometry(\"400x200\")\n\n# لیبل\nlabel_prompt = tk.Label(root, text=\"نام خود را وارد کنید:\")\nlabel_prompt.pack(pady=10)\n\n# فیلد متنی\nentry_name = tk.Entry(root)\nentry_name.pack(pady=5)\n\n# دکمه\nbutton_greet = tk.Button(root, text=\"سلام\", command=greet)\nbutton_greet.pack(pady=10)\n\n# لیبل نمایش نتیجه\nlabel_result = tk.Label(root, text=\"\")\nlabel_result.pack(pady=10)\n\nroot.mainloop()\n\n\nدر این مثال:\n\n\nLabel برای نمایش متن استفاده می‌شود.\n\n\nEntry برای دریافت ورودی کاربر است.\n\n\nButton با پارامتر command متدی را فراخوانی می‌کند.\n\n\nconfig() برای تغییر متن لیبل در زمان اجرا استفاده می‌شود.\n\n\n\n\nتمرین\n\n\n۱. پنجره‌ای با عنوان و اندازه دلخواه بسازید.\n\n\n۲. دو فیلد متنی برای نام و سن ایجاد کنید و دکمه‌ای برای نمایش پیام سلام و سن بسازید.\n\n\n۳. یک دکمه دیگر بسازید که متن لیبل را پاک کند.\n\n\n۴. رنگ پس‌زمینه پنجره و لیبل‌ها را تغییر دهید.\n\n\n۵. چند ویجت دیگر مثل Checkbutton و Radiobutton اضافه کنید و با دکمه مقدار انتخاب‌ها را چاپ کنید."
  },
  {
    "objectID": "Notebooks/sec21_Magic_Methods_Operator_Overloading.html",
    "href": "Notebooks/sec21_Magic_Methods_Operator_Overloading.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و یکم: متدهای جادویی و سربارگذاری عملگرها     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nمتدهای جادویی (Magic Methods) و بازتعریف عملگرها (Operator Overloading)\n\n\n\n\n\n\n\n\nدر پایتون، متدهای جادویی (Magic Methods) متدهایی هستند که با دو underscore قبل و بعد از نام تعریف می‌شوند و رفتارهای داخلی اشیاء را کنترل می‌کنند.\nبا استفاده از این متدها می‌توان عملگرها را برای کلاس‌های خود بازتعریف کرد (Operator Overloading).\n\n\n۱. مثال str و repr\n\n\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\n    def __str__(self):\n        return f\"Product: {self.name}, Price: {self.price}\"\n\n    def __repr__(self):\n        return f\"Product('{self.name}', {self.price})\"\n\np = Product(\"Laptop\", 1500)\nprint(p) # __str__ فراخوانی می‌شود\n\nProduct: Laptop, Price: 1500\n\n\n\nprint(repr(p)) # __repr__ فراخوانی می‌شود\n\nProduct('Laptop', 1500)\n\n\n\n۲. بازتعریف عملگر جمع\n\n\nمی‌توانیم رفتار عملگر + را برای کلاس خود تعریف کنیم.\n\n\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\n    def __add__(self, other):\n        # جمع قیمت دو محصول\n        return self.price + other.price\n\np1 = Product(\"Laptop\", 1500)\np2 = Product(\"Phone\", 800)\ntotal = p1 + p2\nprint(total)  \n\n2300\n\n\n\n۳. متدهای مقایسه\n\n\nمی‌توانیم عملگرهای مقایسه را بازتعریف کنیم:\n\n\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\n    def __lt__(self, other):  # less than\n        return self.price &lt; other.price\n\n    def __eq__(self, other):  # equal\n        return self.price == other.price\n\np1 = Product(\"Laptop\", 1500)\np2 = Product(\"Phone\", 800)\nprint(p1 &lt; p2)  \n\nFalse\n\n\n\nprint(p1 == p2) \n\nFalse\n\n\n\n۴. مزایای استفاده از Magic Methods\n\n\n\nکنترل رفتار اشیاء هنگام چاپ و نمایش\n\n\nامکان استفاده از عملگرهای ریاضی و مقایسه‌ای برای کلاس‌ها\n\n\nخوانایی بهتر و سازگاری با عملیات داخلی پایتون\n\n\nایجاد کلاس‌های حرفه‌ای و قدرتمند با قابلیت تعامل با توابع و عملگرهای پایتون\n\n\n\nتمرین\n\n\n۱. یک کلاس Product بسازید و متد str و repr را برای نمایش شیء تعریف کنید.\n\n\n۲. عملگر + را برای جمع قیمت دو محصول بازتعریف کنید.\n\n\n۳. عملگرهای مقایسه (&lt;, &gt;, ==) را برای مقایسه قیمت دو محصول بازتعریف کنید.\n\n\n۴. چند شیء از کلاس بسازید و همه متدهای جادویی و عملگرهای بازتعریف شده را تست کنید.\n\n\n۵. با استفاده از add مجموع قیمت چند محصول را محاسبه کنید."
  },
  {
    "objectID": "Notebooks/sec20_Inheritance_Polymorphism.html",
    "href": "Notebooks/sec20_Inheritance_Polymorphism.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیستم: وراثت و چندریختی     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nوراثت (Inheritance) و چندریختی (Polymorphism) در پایتون\n\n\nوراثت و چندریختی از اصول مهم برنامه‌نویسی شیءگرا هستند.\n- وراثت (Inheritance) به شما اجازه می‌دهد یک کلاس جدید از کلاس موجود بسازید و ویژگی‌ها و متدهای آن را به ارث ببرید.\n- چندریختی (Polymorphism) به شما اجازه می‌دهد متدها یا عملیات مشابه برای کلاس‌های مختلف رفتار متفاوتی داشته باشند.\n\n\n۱. تعریف کلاس پایه و کلاس فرزند\n\n\nclass Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\n    def display_info(self):\n        print(f\"نام محصول: {self.name}, قیمت: {self.price}\")\n\n# کلاس فرزند از Product ارث می‌برد\nclass Electronic(Product):\n    def __init__(self, name, price, warranty):\n        super().__init__(name, price)  # فراخوانی سازنده کلاس پایه\n        self.warranty = warranty\n\n    def display_info(self):\n        super().display_info()\n        print(f\"مدت گارانتی: {self.warranty} ماه\")\n\ne1 = Electronic(\"Laptop\", 1500, 24)\ne1.display_info()\n\nنام محصول: Laptop, قیمت: 1500\nمدت گارانتی: 24 ماه\n\n\n\n۲. Polymorphism با متدهای هم‌نام\n\n\nمتد display_info در کلاس Electronic رفتار متفاوتی نسبت به کلاس Product دارد. این نمونه‌ای از چندریختی (Polymorphism) است.\n\n\nproducts = [\n    Product(\"Book\", 30),\n    Electronic(\"Phone\", 800, 12)\n]\n\nfor p in products:\n    p.display_info()\n    print(\"------\")\n# متد display_info هر شیء به صورت متفاوت اجرا می‌شود\n\nنام محصول: Book, قیمت: 30\n------\nنام محصول: Phone, قیمت: 800\nمدت گارانتی: 12 ماه\n------\n\n\n\n۳. مزایای وراثت و چندریختی\n\n\n\nکدهای تکراری کمتر می‌شود.\n\n\nامکان توسعه و تغییر برنامه بدون بازنویسی کدها وجود دارد.\n\n\nمتدهای مشترک در کلاس‌های مختلف به شکل یکسان فراخوانی می‌شوند.\n\n\nسازماندهی بهتر کلاس‌ها و قابلیت نگهداری بالاتر.\n\n\n\nتمرین\n\n\n۱. یک کلاس پایه Product بسازید و ویژگی‌های نام و قیمت داشته باشد.\n\n\n۲. یک کلاس فرزند Book از Product بسازید و ویژگی نویسنده اضافه کنید.\n\n\n۳. یک کلاس فرزند Electronic از Product بسازید و ویژگی گارانتی اضافه کنید.\n\n\n۴. متد display_info را در هر کلاس بازنویسی کنید و اطلاعات مخصوص هر نوع محصول را چاپ کنید.\n\n\n۵. چند شیء از هر کلاس بسازید و با یک حلقه polymorphic متد display_info را فراخوانی کنید."
  },
  {
    "objectID": "Notebooks/sec22_Database.html",
    "href": "Notebooks/sec22_Database.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و دوم: پایگاه داده در پایتون     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nمقدمه‌ای بر پایگاه داده در پایتون\n\n\nپایگاه داده‌ها بخش مهمی از اکثر برنامه‌ها هستند و برای ذخیره‌سازی، بازیابی و مدیریت داده‌ها استفاده می‌شوند.\nپایتون امکانات گسترده‌ای برای کار با پایگاه داده‌ها دارد، از پایگاه داده‌های سبک و محلی مثل SQLite تا پایگاه‌های داده قدرتمند سروری مثل MySQL و PostgreSQL.\n\n\n۱. پایگاه داده SQLite در پایتون\n\n\nSQLite یک پایگاه داده سبک و فایل محور است که با پایتون به راحتی کار می‌کند. ما از کتابخانه داخلی sqlite3 استفاده می‌کنیم.\n\n\nimport sqlite3\n\n# ایجاد اتصال به پایگاه داده (در صورت نبودن فایل، ایجاد می‌شود)\nconn = sqlite3.connect(\"shop.db\")\n\n# ایجاد یک cursor برای اجرای دستورات SQL\ncursor = conn.cursor()\n\n# ایجاد جدول محصولات\ncursor.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS products (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    price REAL NOT NULL\n)\n\"\"\")\n\n# ذخیره تغییرات و بستن اتصال\nconn.commit()\nconn.close()\n\n\n۲. درج و بازیابی داده‌ها\n\n\nimport sqlite3\n\nconn = sqlite3.connect(\"shop.db\")\ncursor = conn.cursor()\n\n# افزودن محصول\ncursor.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", (\"Laptop\", 1500))\ncursor.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", (\"Phone\", 800))\n\n# ذخیره تغییرات\nconn.commit()\n\n# بازیابی محصولات\ncursor.execute(\"SELECT * FROM products\")\nproducts = cursor.fetchall()\nfor product in products:\n    print(product)\n\nconn.close()\n\n(1, 'Laptop', 1500.0)\n(2, 'Phone', 800.0)\n\n\n\n۳. مزایای استفاده از پایگاه داده در پایتون\n\n\n\nذخیره‌سازی دائمی داده‌ها به جای نگهداری در حافظه\n\n\nامکان انجام جستجو و فیلتر روی داده‌ها با دستورات SQL\n\n\nسازگاری با اکثر پایگاه داده‌های معروف\n\n\nایجاد برنامه‌های مقیاس‌پذیر و حرفه‌ای\n\n\n\nتمرین\n\n\n۱. یک پایگاه داده SQLite بسازید و جدول محصولات ایجاد کنید.\n\n\n۲. حداقل ۵ محصول با نام و قیمت متفاوت به جدول اضافه کنید.\n\n\n۳. تمام محصولات را از پایگاه داده بازیابی کرده و چاپ کنید.\n\n\n۴. یک محصول جدید اضافه کنید و دوباره تمام محصولات را چاپ کنید تا تغییرات را مشاهده کنید.\n\n\n۵. با استفاده از یک شرط WHERE محصولاتی با قیمت بیشتر از 1000 را بازیابی و چاپ کنید."
  },
  {
    "objectID": "Notebooks/sec24_Tkinter_2.html",
    "href": "Notebooks/sec24_Tkinter_2.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و چهارم: رابط کاربری گرافیکی 2     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nFrameها و مدیریت Layout در Tkinter\n\n\nبرای سازماندهی ویجت‌ها در پنجره‌های بزرگ، از Frame استفاده می‌کنیم. Frame یک قاب (container) است که می‌توان ویجت‌ها را داخل آن قرار داد.\nهمچنین مدیریت موقعیت ویجت‌ها با سه روش امکان‌پذیر است: pack, grid, place.\n\n\n۱. استفاده از Frame\n\n\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"مثال Frame\")\nroot.geometry(\"400x200\")\n\n# ایجاد یک Frame\nframe_top = tk.Frame(root, bg=\"lightblue\", pady=10)\nframe_top.pack(fill=\"x\")\n\nframe_bottom = tk.Frame(root, bg=\"lightgreen\", pady=10)\nframe_bottom.pack(fill=\"x\")\n\n# اضافه کردن ویجت‌ها به Frame\nlabel1 = tk.Label(frame_top, text=\"این ویجت در Frame بالا است\")\nlabel1.pack()\n\nlabel2 = tk.Label(frame_bottom, text=\"این ویجت در Frame پایین است\")\nlabel2.pack()\n\nroot.mainloop()\n\n\nدر این مثال:\n\n\nFrame برای گروه‌بندی ویجت‌ها استفاده شد.\n\n\nبا pack(fill=“x”) عرض Frame تمام پنجره را پوشش می‌دهد.\n\n\nویجت‌ها داخل Frame با pack قرار گرفتند.\n\n\n\n\n۲. مدیریت Layout با grid\n\n\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"مثال Grid\")\nroot.geometry(\"300x150\")\n\ntk.Label(root, text=\"نام:\").grid(row=0, column=0, padx=5, pady=5)\ntk.Entry(root).grid(row=0, column=1, padx=5, pady=5)\n\ntk.Label(root, text=\"سن:\").grid(row=1, column=0, padx=5, pady=5)\ntk.Entry(root).grid(row=1, column=1, padx=5, pady=5)\n\ntk.Button(root, text=\"ثبت\").grid(row=2, column=0, columnspan=2, pady=10)\n\nroot.mainloop()\n\n\nروش grid به شما اجازه می‌دهد ویجت‌ها را در سطرها و ستون‌ها مرتب کنید و کنترل دقیق‌تری نسبت به pack دارد.\n\n\n۳. مدیریت رویدادها (Event Handling)\n\n\nimport tkinter as tk\n\ndef on_click(event):\n    label_result.config(text=f\"شما روی پنجره کلیک کردید! مختصات: ({event.x}, {event.y})\")\n\nroot = tk.Tk()\nroot.title(\"مدیریت رویدادها\")\nroot.geometry(\"400x200\")\n\nlabel_result = tk.Label(root, text=\"\")\nlabel_result.pack(pady=50)\n\n# اتصال رویداد کلیک موس به تابع\nroot.bind(\"&lt;Button-1&gt;\", on_click)\n\nroot.mainloop()\n\n\nبا bind می‌توان هر رویدادی مثل کلیک موس، فشردن کلید یا حرکت موس را به یک تابع متصل کرد و پاسخ دلخواه اجرا شود.\n\n\nتمرین\n\n\n۱. پنجره‌ای با دو Frame بسازید و چند ویجت داخل هر Frame قرار دهید.\n\n\n۲. از روش grid برای مرتب کردن حداقل ۴ ویجت استفاده کنید.\n\n\n۳. یک دکمه بسازید و با bind به آن رویداد کلیک را متصل کنید.\n\n\n۴. وقتی روی پنجره کلیک می‌کنید، مختصات موس در یک لیبل نمایش داده شود.\n\n\n۵. ترکیبی از Frame، grid و bind را استفاده کنید تا یک فرم تعاملی ساده بسازید."
  },
  {
    "objectID": "Notebooks/sec26_Project_Management.html",
    "href": "Notebooks/sec26_Project_Management.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و ششم: مدیریت پروژه     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nمدیریت پروژه در پایتون\n\n\nبرای توسعه برنامه‌های حرفه‌ای پایتون، رعایت اصول مدیریت پروژه ضروری است. این شامل استفاده از محیط‌های مجازی، ساختاردهی پروژه و مدیریت وابستگی‌ها می‌باشد.\n\n\n۱. محیط مجازی (venv)\n\n\nمحیط مجازی به شما اجازه می‌دهد تا بسته‌ها و کتابخانه‌های پروژه را جدا از پایتون سیستم نصب و مدیریت کنید. این باعث جلوگیری از تداخل بسته‌ها بین پروژه‌ها می‌شود.\n\n# ایجاد محیط مجازی\npython -m venv myenv\n\n# فعال‌سازی محیط مجازی\n# در ویندوز\nmyenv\\Scripts\\activate\n\n# در لینوکس / مک\nsource myenv/bin/activate\n\n# نصب بسته‌ها در محیط مجازی\npip install requests\n\n۲. ساختار پروژه\n\n\nیک ساختار استاندارد پروژه باعث خوانایی و نگهداری آسان می‌شود. نمونه ساختار:\n\nproject_name/\n│\n├── myenv/               # محیط مجازی\n├── src/                 # کدهای پروژه\n│   ├── main.py\n│   └── utils.py\n├── tests/               # فایل‌های تست\n│   └── test_main.py\n├── requirements.txt     # لیست وابستگی‌ها\n└── README.md\n\n۳. مدیریت وابستگی‌ها با requirements.txt\n\n\nبا استفاده از فایل requirements.txt می‌توان تمام بسته‌های مورد نیاز پروژه را ثبت کرد و به راحتی توسط pip نصب نمود.\n\n# ذخیره بسته‌های نصب شده در فایل\npip freeze &gt; requirements.txt\n\n# نصب بسته‌ها از فایل\npip install -r requirements.txt\n\n۴. مزایای مدیریت پروژه\n\n\n\nجلوگیری از تداخل بسته‌ها بین پروژه‌ها\n\n\nخوانایی و ساختار مناسب برای توسعه تیمی\n\n\nقابلیت نصب سریع وابستگی‌ها روی سیستم‌های دیگر\n\n\nسهولت نگهداری و به‌روزرسانی پروژه\n\n\n\nتمرین\n\n\n۱. یک محیط مجازی بسازید و فعال کنید.\n\n\n۲. چند بسته مثل requests و pandas را نصب کنید.\n\n\n۳. ساختار پروژه‌ای مانند نمونه ایجاد کنید و فایل‌های خالی main.py و utils.py بسازید.\n\n\n۴. بسته‌های نصب شده را در requirements.txt ذخیره کنید.\n\n\n۵. پروژه را روی یک سیستم دیگر اجرا کنید و وابستگی‌ها را با pip نصب نمایید."
  },
  {
    "objectID": "Notebooks/sec8_Data_Structures_tuples.html",
    "href": "Notebooks/sec8_Data_Structures_tuples.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس هشتم: ساختار داده‌ها در پایتون  &lt;/h3&gt; \n                &lt;h4&gt;چندتایی‌ها  &lt;/h4&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nساختار داده‌ها در پایتون: چندتایی‌ها (Tuples)\n\n\nچندتایی‌ها یا Tupleها مشابه لیست‌ها هستند اما غیرقابل تغییر (immutable) می‌باشند. پس بعد از ایجاد یک Tuple نمی‌توان عناصر آن را تغییر داد، اضافه یا حذف کرد. این ویژگی باعث می‌شود برای داده‌هایی که تغییر نمی‌کنند مناسب باشند.\n\n\n۱. ایجاد Tuple\n\n\nچندتایی با استفاده از پرانتز () تعریف می‌شود و عناصر آن با کاما جدا می‌شوند.\n\n\n# Creating tuples\nt1 = (1, 2, 3, 4)\nt2 = (\"apple\", \"banana\", \"cherry\")\nt3 = (1, \"hello\", 3.14, True)\n\nprint(t1)\nprint(t2)\nprint(t3)\n\n(1, 2, 3, 4)\n('apple', 'banana', 'cherry')\n(1, 'hello', 3.14, True)\n\n\n\n۲. دسترسی به عناصر\n\n\nبرای دسترسی به عناصر Tuple از اندیس استفاده می‌کنیم. اندیس‌ها از صفر شروع می‌شوند و می‌توان از اندیس منفی برای دسترسی از انتهای Tuple استفاده کرد.\n\n\nt = (10, 20, 30, 40)\n\nprint(t[0])   # First element\nprint(t[2])   # Third element\nprint(t[-1])  # Last element\n\n10\n30\n40\n\n\n\n۳. غیرقابل تغییر بودن Tuple\n\n\nچندتایی غیرقابل تغییر است، پس اگر تلاش کنید عنصر آن را تغییر دهید، پایتون خطا می‌دهد.\n\n\nt = (1, 2, 3)\n\n# Trying to modify an element\nt[0] = 100  # Uncommenting this will raise an error\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[17], line 4\n      1 t = (1, 2, 3)\n      3 # Trying to modify an element\n----&gt; 4 t[0] = 100  # Uncommenting this will raise an error\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\n۴. الحاق و تکرار\n\n\nمی‌توانیم چندتایی‌ها را به هم الحاق کنیم یا تکرار کنیم.\n\n\nt1 = (1, 2, 3)\nt2 = (4, 5, 6)\n\n# Concatenation\nt3 = t1 + t2\nprint(t3)\n\n# Repetition\nt4 = t1 * 3\nprint(t4)\n\n(1, 2, 3, 4, 5, 6)\n(1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n\n\n۵. Tuple تو در تو\n\n\nچندتایی‌ها می‌توانند شامل چندتایی‌های دیگر باشند و با دو اندیس به عناصر داخلی دسترسی پیدا کنیم.\n\n\nnested = ((1, 2), (3, 4), (5, 6))\nprint(nested[0])\nprint(nested[1][1])\n\n(1, 2)\n4\n\n\n\n۶. تبدیل بین لیست و Tuple\n\n\nمی‌توان لیست را به Tuple و Tuple را به لیست تبدیل کرد.\n\n\nlst = [1, 2, 3]\ntpl = tuple(lst)\nprint(tpl)\n\nnew_list = list(tpl)\nprint(new_list)\n\n(1, 2, 3)\n[1, 2, 3]\n\n\n\n۷. توابع مفید برای Tuple\n\n\nچندتایی‌ها متدهای محدودی دارند اما می‌توان از توابع عمومی پایتون روی آن‌ها استفاده کرد.\n\n\nt = (10, 20, 30, 40, 20)\n\nprint(len(t))       # Length\nprint(max(t))       # Maximum\nprint(min(t))       # Minimum\nprint(t.count(20))  # Count of element\nprint(t.index(30))  # Index of element\n\n5\n40\n10\n2\n2\n\n\n\n۸. استفاده از Tuple برای چند مقدار بازگشتی\n\n\nتوابع می‌توانند چند مقدار را همزمان با استفاده از Tuple بازگردانند.\n\n\ndef min_max(values):\n    return (min(values), max(values))\n\nresult = min_max([4, 7, 1, 9, 3])\nprint(result)\n\n(1, 9)\n\n\n\nتمرین\n\n\n۱. یک Tuple شامل نام، نام خانوادگی و سن خود بسازید.\n\n\n۲. یک لیست از نمرات درسی تعریف کنید و آن را به Tuple تبدیل کنید.\n\n\n۳. تابعی بنویسید که هم مجموع و هم میانگین یک لیست از اعداد را برگرداند (به صورت Tuple).\n\n\n۴. یک Tuple تو در تو بسازید و با استفاده از اندیس به یکی از عناصر داخلی دسترسی پیدا کنید.\n\n\n۵. یک Tuple شامل چند نوع داده مختلف بسازید و تعداد و موقعیت یک عنصر خاص را با استفاده از توابع count و index پیدا کنید."
  },
  {
    "objectID": "Notebooks/sec27_Project_Management.html",
    "href": "Notebooks/sec27_Project_Management.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و ششم: مدیریت پروژه     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nمدیریت پروژه در پایتون\n\n\nبرای توسعه برنامه‌های حرفه‌ای پایتون، رعایت اصول مدیریت پروژه ضروری است. این شامل استفاده از محیط‌های مجازی، ساختاردهی پروژه و مدیریت وابستگی‌ها می‌باشد.\n\n\n۱. محیط مجازی (venv)\n\n\nمحیط مجازی به شما اجازه می‌دهد تا بسته‌ها و کتابخانه‌های پروژه را جدا از پایتون سیستم نصب و مدیریت کنید. این باعث جلوگیری از تداخل بسته‌ها بین پروژه‌ها می‌شود.\n\n# ایجاد محیط مجازی\npython -m venv myenv\n\n# فعال‌سازی محیط مجازی\n# در ویندوز\nmyenv\\Scripts\\activate\n\n# در لینوکس / مک\nsource myenv/bin/activate\n\n# نصب بسته‌ها در محیط مجازی\npip install requests\n\n۲. ساختار پروژه\n\n\nیک ساختار استاندارد پروژه باعث خوانایی و نگهداری آسان می‌شود. نمونه ساختار:\n\nproject_name/\n│\n├── myenv/               # محیط مجازی\n├── src/                 # کدهای پروژه\n│   ├── main.py\n│   └── utils.py\n├── tests/               # فایل‌های تست\n│   └── test_main.py\n├── requirements.txt     # لیست وابستگی‌ها\n└── README.md\n\n۳. مدیریت وابستگی‌ها با requirements.txt\n\n\nبا استفاده از فایل requirements.txt می‌توان تمام بسته‌های مورد نیاز پروژه را ثبت کرد و به راحتی توسط pip نصب نمود.\n\n# ذخیره بسته‌های نصب شده در فایل\npip freeze &gt; requirements.txt\n\n# نصب بسته‌ها از فایل\npip install -r requirements.txt\n\n۴. مزایای مدیریت پروژه\n\n\n\nجلوگیری از تداخل بسته‌ها بین پروژه‌ها\n\n\nخوانایی و ساختار مناسب برای توسعه تیمی\n\n\nقابلیت نصب سریع وابستگی‌ها روی سیستم‌های دیگر\n\n\nسهولت نگهداری و به‌روزرسانی پروژه\n\n\n\nتمرین\n\n\n۱. یک محیط مجازی بسازید و فعال کنید.\n\n\n۲. چند بسته مثل requests و pandas را نصب کنید.\n\n\n۳. ساختار پروژه‌ای مانند نمونه ایجاد کنید و فایل‌های خالی main.py و utils.py بسازید.\n\n\n۴. بسته‌های نصب شده را در requirements.txt ذخیره کنید.\n\n\n۵. پروژه را روی یک سیستم دیگر اجرا کنید و وابستگی‌ها را با pip نصب نمایید."
  },
  {
    "objectID": "Notebooks/sec25_Tkinter_2.html",
    "href": "Notebooks/sec25_Tkinter_2.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و چهارم: رابط کاربری گرافیکی 2     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nFrameها و مدیریت Layout در Tkinter\n\n\nبرای سازماندهی ویجت‌ها در پنجره‌های بزرگ، از Frame استفاده می‌کنیم. Frame یک قاب (container) است که می‌توان ویجت‌ها را داخل آن قرار داد.\nهمچنین مدیریت موقعیت ویجت‌ها با سه روش امکان‌پذیر است: pack, grid, place.\n\n\n۱. استفاده از Frame\n\n\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"مثال Frame\")\nroot.geometry(\"400x200\")\n\n# ایجاد یک Frame\nframe_top = tk.Frame(root, bg=\"lightblue\", pady=10)\nframe_top.pack(fill=\"x\")\n\nframe_bottom = tk.Frame(root, bg=\"lightgreen\", pady=10)\nframe_bottom.pack(fill=\"x\")\n\n# اضافه کردن ویجت‌ها به Frame\nlabel1 = tk.Label(frame_top, text=\"این ویجت در Frame بالا است\")\nlabel1.pack()\n\nlabel2 = tk.Label(frame_bottom, text=\"این ویجت در Frame پایین است\")\nlabel2.pack()\n\nroot.mainloop()\n\n\nدر این مثال:\n\n\nFrame برای گروه‌بندی ویجت‌ها استفاده شد.\n\n\nبا pack(fill=“x”) عرض Frame تمام پنجره را پوشش می‌دهد.\n\n\nویجت‌ها داخل Frame با pack قرار گرفتند.\n\n\n\n\n۲. مدیریت Layout با grid\n\n\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"مثال Grid\")\nroot.geometry(\"300x150\")\n\ntk.Label(root, text=\"نام:\").grid(row=0, column=0, padx=5, pady=5)\ntk.Entry(root).grid(row=0, column=1, padx=5, pady=5)\n\ntk.Label(root, text=\"سن:\").grid(row=1, column=0, padx=5, pady=5)\ntk.Entry(root).grid(row=1, column=1, padx=5, pady=5)\n\ntk.Button(root, text=\"ثبت\").grid(row=2, column=0, columnspan=2, pady=10)\n\nroot.mainloop()\n\n\nروش grid به شما اجازه می‌دهد ویجت‌ها را در سطرها و ستون‌ها مرتب کنید و کنترل دقیق‌تری نسبت به pack دارد.\n\n\n۳. مدیریت رویدادها (Event Handling)\n\n\nimport tkinter as tk\n\ndef on_click(event):\n    label_result.config(text=f\"شما روی پنجره کلیک کردید! مختصات: ({event.x}, {event.y})\")\n\nroot = tk.Tk()\nroot.title(\"مدیریت رویدادها\")\nroot.geometry(\"400x200\")\n\nlabel_result = tk.Label(root, text=\"\")\nlabel_result.pack(pady=50)\n\n# اتصال رویداد کلیک موس به تابع\nroot.bind(\"&lt;Button-1&gt;\", on_click)\n\nroot.mainloop()\n\n\nبا bind می‌توان هر رویدادی مثل کلیک موس، فشردن کلید یا حرکت موس را به یک تابع متصل کرد و پاسخ دلخواه اجرا شود.\n\n\nتمرین\n\n\n۱. پنجره‌ای با دو Frame بسازید و چند ویجت داخل هر Frame قرار دهید.\n\n\n۲. از روش grid برای مرتب کردن حداقل ۴ ویجت استفاده کنید.\n\n\n۳. یک دکمه بسازید و با bind به آن رویداد کلیک را متصل کنید.\n\n\n۴. وقتی روی پنجره کلیک می‌کنید، مختصات موس در یک لیبل نمایش داده شود.\n\n\n۵. ترکیبی از Frame، grid و bind را استفاده کنید تا یک فرم تعاملی ساده بسازید."
  },
  {
    "objectID": "Notebooks/sec23_Database.html",
    "href": "Notebooks/sec23_Database.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و دوم: پایگاه داده در پایتون     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nمقدمه‌ای بر پایگاه داده در پایتون\n\n\nپایگاه داده‌ها بخش مهمی از اکثر برنامه‌ها هستند و برای ذخیره‌سازی، بازیابی و مدیریت داده‌ها استفاده می‌شوند.\nپایتون امکانات گسترده‌ای برای کار با پایگاه داده‌ها دارد، از پایگاه داده‌های سبک و محلی مثل SQLite تا پایگاه‌های داده قدرتمند سروری مثل MySQL و PostgreSQL.\n\n\n۱. پایگاه داده SQLite در پایتون\n\n\nSQLite یک پایگاه داده سبک و فایل محور است که با پایتون به راحتی کار می‌کند. ما از کتابخانه داخلی sqlite3 استفاده می‌کنیم.\n\n\nimport sqlite3\n\n# ایجاد اتصال به پایگاه داده (در صورت نبودن فایل، ایجاد می‌شود)\nconn = sqlite3.connect(\"shop.db\")\n\n# ایجاد یک cursor برای اجرای دستورات SQL\ncursor = conn.cursor()\n\n# ایجاد جدول محصولات\ncursor.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS products (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    price REAL NOT NULL\n)\n\"\"\")\n\n# ذخیره تغییرات و بستن اتصال\nconn.commit()\nconn.close()\n\n\n۲. درج و بازیابی داده‌ها\n\n\nimport sqlite3\n\nconn = sqlite3.connect(\"shop.db\")\ncursor = conn.cursor()\n\n# افزودن محصول\ncursor.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", (\"Laptop\", 1500))\ncursor.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", (\"Phone\", 800))\n\n# ذخیره تغییرات\nconn.commit()\n\n# بازیابی محصولات\ncursor.execute(\"SELECT * FROM products\")\nproducts = cursor.fetchall()\nfor product in products:\n    print(product)\n\nconn.close()\n\n(1, 'Laptop', 1500.0)\n(2, 'Phone', 800.0)\n\n\n\n۳. مزایای استفاده از پایگاه داده در پایتون\n\n\n\nذخیره‌سازی دائمی داده‌ها به جای نگهداری در حافظه\n\n\nامکان انجام جستجو و فیلتر روی داده‌ها با دستورات SQL\n\n\nسازگاری با اکثر پایگاه داده‌های معروف\n\n\nایجاد برنامه‌های مقیاس‌پذیر و حرفه‌ای\n\n\n\nتمرین\n\n\n۱. یک پایگاه داده SQLite بسازید و جدول محصولات ایجاد کنید.\n\n\n۲. حداقل ۵ محصول با نام و قیمت متفاوت به جدول اضافه کنید.\n\n\n۳. تمام محصولات را از پایگاه داده بازیابی کرده و چاپ کنید.\n\n\n۴. یک محصول جدید اضافه کنید و دوباره تمام محصولات را چاپ کنید تا تغییرات را مشاهده کنید.\n\n\n۵. با استفاده از یک شرط WHERE محصولاتی با قیمت بیشتر از 1000 را بازیابی و چاپ کنید."
  },
  {
    "objectID": "Notebooks/sec22_Iterators.html",
    "href": "Notebooks/sec22_Iterators.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس هفدهم: تکرارکننده‌ها و تکرارشونده‌ها    &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nIterables و Iterators در پایتون\n\n\nدر پایتون، بسیاری از اشیاء قابل تکرار هستند؛ مانند لیست‌ها، تاپل‌ها، رشته‌ها و دیکشنری‌ها.\nبه این اشیاء Iterable می‌گوییم، زیرا می‌توانیم آن‌ها را تکرار کنیم (با حلقه for یا سایر توابع).\nIterator ابزاری است که روی یک Iterable حرکت می‌کند و عنصر بعدی را برمی‌گرداند.\n\n\n۱. Iterable چیست؟\n\n\nیک شئ Iterable باید متد iter() داشته باشد. لیست‌ها، تاپل‌ها، رشته‌ها و دیکشنری‌ها نمونه‌هایی از Iterable هستند.\n\n\n# List is an iterable\nnumbers = [1, 2, 3, 4]\nfor num in numbers:\n    print(num)\n\n# String is also iterable\ntext = \"Python\"\nfor char in text:\n    print(char)\n\n1\n2\n3\n4\nP\ny\nt\nh\no\nn\n\n\n\n۲. Iterator چیست؟\n\n\nIterator یک شئ است که متد next() دارد و با آن می‌توان عناصر یک Iterable را یکی‌یکی دریافت کرد. برای دریافت Iterator از یک Iterable، از تابع iter() استفاده می‌کنیم.\n\n\nnumbers = [10, 20, 30]\nit = iter(numbers)\n\nprint(next(it))  \n\n10\n\n\n\nprint(next(it))  \n\n20\n\n\n\nprint(next(it))  \n\n30\n\n\n\nprint(next(it))\n\n\n---------------------------------------------------------------------------\nStopIteration                             Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 print(next(it))\n\nStopIteration: \n\n\n\n\n۳. حلقه for و Iterators\n\n\nحلقه for به صورت خودکار از Iterable یک Iterator می‌سازد و با next() عناصر را دریافت می‌کند. بنابراین کد کوتاه و خوانا می‌شود.\n\n\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)\n\n1\n2\n3\n4\n5\n\n\n\n۴. ساخت Iterator اختصاصی\n\n\nمی‌توان کلاس‌هایی ساخت که خودشان Iterator باشند. برای این کار باید متدهای iter() و next() را تعریف کنیم.\n\n\nclass MyRange:\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.current &gt;= self.end:\n            raise StopIteration\n        value = self.current\n        self.current += 1\n        return value\n\nfor i in MyRange(5, 10):\n    print(i)\n\n5\n6\n7\n8\n9\n\n\n\n۵. توابع کمکی با Iterators\n\n\nپایتون توابعی مانند enumerate()، zip() و reversed() تولید Iterator می‌کنند و می‌توان از آن‌ها در حلقه for استفاده کرد.\n\n\n# enumerate example\nwords = [\"apple\", \"banana\", \"cherry\"]\nfor idx, word in enumerate(words):\n    print(idx, word)\n\n# zip returns iterator\nnumbers = [1, 2, 3]\nletters = ['a', 'b', 'c']\nfor n, l in zip(numbers, letters):\n    print(n, l)\n\n0 apple\n1 banana\n2 cherry\n1 a\n2 b\n3 c\n\n\n\n# reversed returns iterator\nfor n in reversed(numbers):\n    print(n)\n\n3\n2\n1\n\n\n\nتمرین\n\n\n۱. یک لیست بسازید و با حلقه for تمام عناصر آن را چاپ کنید.\n\n\n۲. یک Iterator از یک رشته بسازید و با next() عناصر آن را یکی‌یکی چاپ کنید.\n\n\n۳. یک کلاس بسازید که یک محدوده عددی را به صورت Iterator برگرداند.\n\n\n۴. با استفاده از enumerate، ایندکس و مقدار عناصر یک لیست را چاپ کنید.\n\n\n۵. دو لیست بسازید و با zip آن‌ها را ترکیب کرده و عناصر آن را چاپ کنید.\n\n\n۶. یک Iterator بسازید و در یک حلقه while با next() تمام عناصر آن را چاپ کنید تا StopIteration رخ دهد."
  },
  {
    "objectID": "Notebooks/sec24_Tkinter_1.html",
    "href": "Notebooks/sec24_Tkinter_1.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و سوم: رابط کاربری گرافیکی 1     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nمقدمه‌ای بر GUI در پایتون با Tkinter\n\n\nTkinter کتابخانه استاندارد پایتون برای ساخت برنامه‌های گرافیکی (GUI) است. با Tkinter می‌توان پنجره‌ها، دکمه‌ها، لیبل‌ها، فیلدهای متنی و دیگر ویجت‌ها را ایجاد کرد و تعامل با کاربر را پیاده‌سازی نمود.\n\n\nبخش ۱: ایجاد پنجره ساده\n\n\nبرای شروع، ابتدا Tkinter را وارد کرده و یک پنجره ساده ایجاد می‌کنیم.\n\n\nimport tkinter as tk\n\n# ایجاد پنجره اصلی\nroot = tk.Tk()\nroot.title(\"پنجره ساده\")\nroot.geometry(\"300x200\")  # عرض 300 و ارتفاع 200\n\n# نمایش پنجره\nroot.mainloop()\n\n\nدر کد بالا:\n\n\nTk() پنجره اصلی را ایجاد می‌کند.\n\n\ntitle() عنوان پنجره را مشخص می‌کند.\n\n\ngeometry() اندازه پنجره را تعیین می‌کند.\n\n\nmainloop() باعث می‌شود پنجره در حالت اجرا باقی بماند.\n\n\n\n\nبخش ۲: ویجت‌ها و تعامل با کاربر\n\n\nویجت‌ها عناصر گرافیکی پنجره هستند، مثل لیبل، دکمه و فیلد متنی. می‌توانیم با آن‌ها تعامل داشته باشیم.\n\n\nimport tkinter as tk\n\ndef greet():\n    name = entry_name.get()\n    label_result.config(text=f\"سلام {name}!\")\n\nroot = tk.Tk()\nroot.title(\"تعامل با کاربر\")\nroot.geometry(\"400x200\")\n\n# لیبل\nlabel_prompt = tk.Label(root, text=\"نام خود را وارد کنید:\")\nlabel_prompt.pack(pady=10)\n\n# فیلد متنی\nentry_name = tk.Entry(root)\nentry_name.pack(pady=5)\n\n# دکمه\nbutton_greet = tk.Button(root, text=\"سلام\", command=greet)\nbutton_greet.pack(pady=10)\n\n# لیبل نمایش نتیجه\nlabel_result = tk.Label(root, text=\"\")\nlabel_result.pack(pady=10)\n\nroot.mainloop()\n\n\nدر این مثال:\n\n\nLabel برای نمایش متن استفاده می‌شود.\n\n\nEntry برای دریافت ورودی کاربر است.\n\n\nButton با پارامتر command متدی را فراخوانی می‌کند.\n\n\nconfig() برای تغییر متن لیبل در زمان اجرا استفاده می‌شود.\n\n\n\n\nتمرین\n\n\n۱. پنجره‌ای با عنوان و اندازه دلخواه بسازید.\n\n\n۲. دو فیلد متنی برای نام و سن ایجاد کنید و دکمه‌ای برای نمایش پیام سلام و سن بسازید.\n\n\n۳. یک دکمه دیگر بسازید که متن لیبل را پاک کند.\n\n\n۴. رنگ پس‌زمینه پنجره و لیبل‌ها را تغییر دهید.\n\n\n۵. چند ویجت دیگر مثل Checkbutton و Radiobutton اضافه کنید و با دکمه مقدار انتخاب‌ها را چاپ کنید."
  },
  {
    "objectID": "Notebooks/sec26_Tkinter_3.html",
    "href": "Notebooks/sec26_Tkinter_3.html",
    "title": "آموزش برنامه نویسی پایتون",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt; \n                &lt;h3&gt;درس بیست و پنجم: رابط کاربری گرافیکی 3     &lt;/h3&gt; \n           &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nویجت‌های پیشرفته در Tkinter: Listbox، Combobox و Scrollbar\n\n\nدر برنامه‌های GUI بزرگ، گاهی نیاز به انتخاب از لیست طولانی، یا پیمایش محتوا داریم. Tkinter ویجت‌های پیشرفته‌ای برای این موارد دارد:\n\n\nListbox: نمایش لیستی از آیتم‌ها و انتخاب یک یا چند مورد.\n\n\nCombobox: یک منوی کشویی برای انتخاب یک گزینه.\n\n\nScrollbar: پیمایشگر برای Listbox یا Text.\n\n\n\n\n۱. Listbox و Scrollbar\n\n\nimport tkinter as tk\n\nroot = tk.Tk()\nroot.title(\"Listbox با Scrollbar\")\nroot.geometry(\"300x250\")\n\n# ایجاد Scrollbar\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=\"right\", fill=\"y\")\n\n# ایجاد Listbox\nlistbox = tk.Listbox(root, yscrollcommand=scrollbar.set)\nfor item in range(1, 21):\n    listbox.insert(\"end\", f\"آیتم {item}\")\nlistbox.pack(pady=20)\n\n# اتصال Scrollbar به Listbox\nscrollbar.config(command=listbox.yview)\n\nroot.mainloop()\n\n\nدر این مثال، با Scrollbar می‌توان لیست طولانی را پیمایش کرد و انتخاب آیتم‌ها با Listbox انجام می‌شود.\n\n\n۲. Combobox\n\n\nimport tkinter as tk\nfrom tkinter import ttk\n\nroot = tk.Tk()\nroot.title(\"Combobox مثال\")\nroot.geometry(\"300x150\")\n\ndef show_selection(event):\n    label_result.config(text=f\"انتخاب شما: {combo.get()}\")\n\n# Combobox\ncombo = ttk.Combobox(root, values=[\"گزینه ۱\", \"گزینه ۲\", \"گزینه ۳\"])\ncombo.pack(pady=20)\ncombo.bind(\"&lt;&lt;ComboboxSelected&gt;&gt;\", show_selection)\n\nlabel_result = tk.Label(root, text=\"\")\nlabel_result.pack()\n\nroot.mainloop()\n\n\nCombobox برای انتخاب از یک منوی کشویی مناسب است و با رویداد &lt;&lt;ComboboxSelected&gt;&gt; می‌توان انتخاب کاربر را مدیریت کرد.\n\n\n۳. ترکیب ویجت‌ها برای یک فرم پیشرفته\n\n\nimport tkinter as tk\nfrom tkinter import ttk\n\nroot = tk.Tk()\nroot.title(\"فرم پیشرفته\")\nroot.geometry(\"400x300\")\n\ntk.Label(root, text=\"انتخاب محصول:\").pack(pady=5)\ncombo_product = ttk.Combobox(root, values=[\"Laptop\", \"Phone\", \"Tablet\"])\ncombo_product.pack(pady=5)\n\ntk.Label(root, text=\"لیست موجودی:\").pack(pady=5)\nscrollbar = tk.Scrollbar(root)\nscrollbar.pack(side=\"right\", fill=\"y\")\n\nlistbox_inventory = tk.Listbox(root, yscrollcommand=scrollbar.set)\nfor i in range(1, 31):\n    listbox_inventory.insert(\"end\", f\"محصول شماره {i}\")\nlistbox_inventory.pack(pady=5)\n\nscrollbar.config(command=listbox_inventory.yview)\n\ndef show_selection():\n    selected = combo_product.get()\n    label_result.config(text=f\"محصول انتخابی: {selected}\")\n\ntk.Button(root, text=\"نمایش انتخاب\", command=show_selection).pack(pady=10)\nlabel_result = tk.Label(root, text=\"\")\nlabel_result.pack()\n\nroot.mainloop()\n\n\nتمرین\n\n\n۱. یک پنجره بسازید و Listbox با حداقل ۱۵ آیتم اضافه کنید.\n\n\n۲. یک Scrollbar به Listbox متصل کنید تا لیست قابل پیمایش باشد.\n\n\n۳. یک Combobox با ۵ گزینه ایجاد کنید و انتخاب آن را در یک Label نمایش دهید.\n\n\n۴. یک دکمه بسازید که آیتم انتخاب شده از Combobox را به Listbox اضافه کند.\n\n\n۵. ترکیبی از Listbox، Combobox و Scrollbar بسازید تا یک فرم تعاملی کامل ایجاد شود."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "برنامه‌نویسی پایتون",
    "section": "",
    "text": "دکتر حسین حق‌بین\nهیئت علمی گروه آمار، دانشکده مهندسی سیستم های هوشمند و علوم داده، دانشگاه خلیج فارس\n\n\n\nسطح مقدماتی 🟢\n\nهدف: یادگیری مبانی زبان برنامه‌نویسی پایتون 🎯\n\n\n\n\n🔢 بخش\n🧑‍🏫 درس\n📚 جزئیات\n🔗 لینک\n\n\n\n\n1\nنصب و معرفی محیط\nمقدمه‌ای بر پایتون و محیط برنامه‌نویسینصب Python، Jupyter، Google Colab، VS Code\nدرس 1\n\n\n2\nانواع داده\nمتغیرها، اعداد، رشته‌ها، بولی\nدرس 2\n\n\n3\nعملگرها\nعملگرهای ریاضی، مقایسه‌ای، منطقی\nدرس 3\n\n\n4\nورودی/خروجی\ninput(), print(), f-string، format()\nدرس 4\n\n\n5\nکنترل جریان\nشرط‌ها، حلقه‌ها، break و continue\nدرس 5\n\n\n6\nتوابع\nتعریف توابع، پارامتر، مقدار بازگشتی، math\nدرس 6\n\n\n7\nساختارهای داده: لیست‌ها\nکار با لیست‌ها\nدرس 7\n\n\n8\nساختارهای داده: چندتایی‌ها\nکار با چندتایی‌ها\nدرس 8\n\n\n9\nساختارهای داده: دیکشنری‌ها\nکار با دیکشنری‌ها\nدرس 9\n\n\n10\nساختارهای داده: مجموعه‌ها\nکار با مجموعه‌ها\nدرس 10\n\n\n11\nرشته ها\nکار با رشته ها\nدرس 11\n\n\n*\nپروژه سطح مقدماتی\nمدیریت کتابخانه کوچک\nپروژه 1\n\n\n\n\n\n\nسطح متوسط 🟡\n\nهدف: کار با ابزارهای پیشرفته در پایتون 🎯\n\n\n\n\n🔢 بخش\n🧑‍🏫 درس\n📚 جزئیات\n🔗 لینک\n\n\n\n\n12\nکار با فایل ها\nکار با فایل ها\nدرس 12\n\n\n13\nتوابع پیشرفته\nلامبدا، map, filter, zip\nدرس 13\n\n\n14\nدکوراتورها و بستارها\nDecorators و Closure ها در پایتون\nدرس 14\n\n\n15\nماژول‌ها و کتابخانه‌ها\nکار با کتابخانه‌ها\nدرس 15\n\n\n16\nمدیریت استثناها\nساختار try-except، raise، finaly\nدرس 16\n\n\n*\nپروژه سطح متوسطه\nمدیریت فروشگاه آنلاین\nپروژه 2\n\n\n\n\n\n\nسطح پیشرفته 🔵\n\nهدف: برنامه نویسی شی‌گرا و ساخت نرم‌افزارهای کاربردی 🎯\n\n\n\n\n🔢 بخش\n🧑‍🏫 درس\n📚 جزئیات\n🔗 لینک\n\n\n\n\n17\nکلاس و اشیاء\nکلاس‌ها و اشیاء و مقدمه OOP\nدرس 17\n\n\n18\nمتدها و ویژگی‌ها\nمتدها و ویژگی‌های کلاس‌ها\nدرس 18\n\n\n19\nکپسوله‌سازی\nEncapsulation، Getter و Setter و حفاظت از ویژگی‌ها\nدرس 19\n\n\n20\nوراثت و چندریختی\nفرم، دکمه، اتصال گرافیکی به DB\nدرس 20\n\n\n21\nمتدهای جادویی و سربارگذاری عملگرها\nمتدهای جادویی (Magic Methods) و بازتعریف عملگرها (Operator Overloading)\nدرس 21\n\n\n22\nکار با iteratorها , iterableها\nتکرارکننده‌ها و تکرارشونده‌ها\nدرس 22\n\n\n23\nپایگاه‌داده\nکار با پایگاه‌داده‌های SQLite\nدرس 23\n\n\n24\nرابط کاربری گرافیکی 1\nمقدمه و ایجاد پنجره ساده و ویجت‌ها و تعامل با کاربر\nدرس 24\n\n\n25\nرابط کاربری گرافیکی 2\nFrameها، Layout و مدیریت رویدادها\nدرس 25\n\n\n26\nرابط کاربری گرافیکی 3\nویجت‌های پیشرفته: Listbox، Combobox و Scrollbar\nدرس 26\n\n\n27\nمدیریت پروژه\nvenv، ساختار پروژه، requirements.txt\nدرس 27\n\n\n*\nپروژه سطح پیشرفته\nمدیریت فروشگاه آنلاین\nپروژه 3\n\n\n\n\n\n\nپیش‌نیازها 🛠\nبرای اجرای فایل‌ها از دستورات زیر استفاده کنید:\npip install -r requirements.txt"
  }
]