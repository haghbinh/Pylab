[
  {
    "objectID": "Notebooks/sec7_Data_Structures.html",
    "href": "Notebooks/sec7_Data_Structures.html",
    "title": "",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس هفتم: ساختار داده‌ها در پایتون  &lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nساختار داده‌ها در پایتون: لیست‌ها (Lists)\n\n\nلیست‌ها یکی از پرکاربردترین ساختارهای داده در پایتون هستند. لیست‌ها مجموعه‌ای از عناصر هستند که می‌توانند از انواع مختلف داده تشکیل شده باشند. ویژگی مهم لیست‌ها این است که قابل تغییر (mutable) هستند و می‌توان عناصر آن‌ها را اضافه، حذف یا تغییر داد.\n\n\n۱. تعریف لیست\n\n\nلیست‌ها با استفاده از کروشه [] تعریف می‌شوند و عناصر با کاما جدا می‌شوند.\n\n\nnumbers = [1, 2, 3, 4, 5]\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmixed = [1, \"apple\", True, 3.14]\n\nprint(numbers)\nprint(fruits)\nprint(mixed)\n\n[1, 2, 3, 4, 5]\n['apple', 'banana', 'cherry']\n[1, 'apple', True, 3.14]\n\n\n\n۲. دسترسی به عناصر لیست\n\n\nبرای دسترسی به عناصر لیست از اندیس (index) استفاده می‌کنیم. اندیس‌ها از صفر شروع می‌شوند و می‌توان از اندیس منفی برای دسترسی از انتهای لیست استفاده کرد.\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])   # اولین عنصر\nprint(fruits[-1])  # آخرین عنصر\n\napple\ncherry\n\n\n\n۳. تغییر عناصر لیست\n\n\nمی‌توانیم عناصر لیست را مستقیماً تغییر دهیم:\n\n\nnumbers = [1, 2, 3]\nnumbers[1] = 20\nprint(numbers)  # [1, 20, 3]\n\n[1, 20, 3]\n\n\n\n۴. افزودن عناصر به لیست\n\n\nروش‌های مختلفی برای اضافه کردن عنصر به لیست وجود دارد:\n\n\nfruits = [\"apple\", \"banana\"]\n\n# اضافه کردن یک عنصر در انتهای لیست\nfruits.append(\"cherry\")\nprint(fruits)\n\n# اضافه کردن چند عنصر\nfruits.extend([\"orange\", \"kiwi\"])\nprint(fruits)\n\n# اضافه کردن عنصر در موقعیت مشخص\nfruits.insert(1, \"mango\")\nprint(fruits)\n\n['apple', 'banana', 'cherry']\n['apple', 'banana', 'cherry', 'orange', 'kiwi']\n['apple', 'mango', 'banana', 'cherry', 'orange', 'kiwi']\n\n\n\n۵. حذف عناصر از لیست\n\n\nfruits = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\n# حذف با نام عنصر\nfruits.remove(\"banana\")\nprint(fruits)\n\n# حذف با اندیس و دریافت مقدار حذف شده\nremoved = fruits.pop(1)\nprint(fruits)\nprint(\"Removed:\", removed)\n\n# حذف آخرین عنصر\nfruits.pop()\nprint(fruits)\n\n['apple', 'cherry', 'orange']\n['apple', 'orange']\nRemoved: cherry\n['apple']\n\n\n\n۶. بررسی وجود عنصر\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(\"apple\" in fruits)   # True\nprint(\"kiwi\" not in fruits) # True\n\nTrue\nTrue\n\n\n\n۷. طول لیست\n\n\nnumbers = [1, 2, 3, 4, 5]\nprint(len(numbers))  # 5\n\n5\n\n\n\n۸. حلقه روی لیست\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n\napple\nbanana\ncherry\n\n\n\n۹. مرتب‌سازی و معکوس کردن\n\n\nnumbers = [5, 2, 9, 1, 7]\n\n# مرتب‌سازی صعودی\nnumbers.sort()\nprint(numbers)\n\n# مرتب‌سازی نزولی\nnumbers.sort(reverse=True)\nprint(numbers)\n\n# معکوس کردن لیست\nnumbers.reverse()\nprint(numbers)\n\n[1, 2, 5, 7, 9]\n[9, 7, 5, 2, 1]\n[1, 2, 5, 7, 9]\n\n\n\n۱۰. کپی و تکرار لیست\n\n\nfruits = [\"apple\", \"banana\"]\nfruits_copy = fruits.copy()\nprint(fruits_copy)\n\n# تکرار عناصر\nnumbers = [1, 2, 3] * 3\nprint(numbers)\n\n['apple', 'banana']\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n\n\n۱۱. لیست‌های تو در تو\n\n\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(matrix[0][1])  # 2\n\n2\n\n\n\n۱۲. تبدیل سایر داده‌ها به لیست\n\n\nstring = \"hello\"\nlist_from_string = list(string)\nprint(list_from_string)\n\ntuple_data = (1, 2, 3)\nlist_from_tuple = list(tuple_data)\nprint(list_from_tuple)\n\n['h', 'e', 'l', 'l', 'o']\n[1, 2, 3]\n\n\n\n۱۳. برش یا Slicing در لیست‌ها\n\n\nبا استفاده از Slicing می‌توانیم بخش خاصی از لیست را استخراج کنیم. قالب کلی به صورت list[start:stop:step] است:\n\n\nstart: اندیس شروع (شامل آن عنصر)\n\n\nstop: اندیس پایان (غیر شامل)\n\n\nstep: گام یا فاصله بین عناصر\n\n\n\n\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# استخراج عناصر از اندیس 2 تا 5 (شامل 2، 3، 4، 5)\nprint(numbers[2:6])\n\n# استخراج از ابتدا تا اندیس 4\nprint(numbers[:5])\n\n# استخراج از اندیس 5 تا انتها\nprint(numbers[5:])\n\n# استخراج همه عناصر با گام 2\nprint(numbers[::2])\n\n# معکوس کردن لیست با Slicing\nprint(numbers[::-1])\n\n[2, 3, 4, 5]\n[0, 1, 2, 3, 4]\n[5, 6, 7, 8, 9]\n[0, 2, 4, 6, 8]\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\n\nتمرین\n\n\n۱. لیستی از ۵ عدد بسازید و مجموع عناصر آن را محاسبه کنید.\n\n\n۲. برنامه‌ای بنویسید که از کاربر چند نام دریافت کند، آن‌ها را در یک لیست ذخیره کند و سپس چاپ نماید.\n\n\n۳. لیستی از اعداد داشته باشید. عناصر بزرگتر از ۵ را حذف کنید و لیست جدید را چاپ کنید.\n\n\n۴. یک لیست دو بعدی (matrix) بسازید و مجموع عناصر هر سطر را محاسبه کنید.\n\n\n۵. تابعی بنویسید که یک لیست طبیعی دریافت کند و مقادیر فرد آن را بصورت یک لیست برگرداند."
  },
  {
    "objectID": "Notebooks/sec5_Control_Flow.html",
    "href": "Notebooks/sec5_Control_Flow.html",
    "title": "",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس پنجم: کنترل جریان  &lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nکنترل جریان (Control Flow)\n\n\nدر برنامه‌نویسی، کنترل جریان به تصمیم‌گیری و تکرار در اجرای دستورات گفته می‌شود. با استفاده از شرط‌ها، حلقه‌ها و دستورات break و continue می‌توان مسیر اجرای برنامه را کنترل کرد.\n\n\n۱. شرط‌ها (if, elif, else)\n\n\nبا دستور if می‌توانیم بر اساس یک شرط تصمیم بگیریم که بخش خاصی از کد اجرا شود. از elif و else برای بررسی شرایط دیگر یا حالت پیش‌فرض استفاده می‌کنیم.\n\n\nx = 15\n\nif x &gt; 20:\n    print(\"x is greater than 20\")\nelif x == 15:\n    print(\"x is exactly 15\")\nelse:\n    print(\"x is less than 15\")\n\nx is exactly 15\n\n\n\nConditional Expressions (Ternary Operator)\n\nx = eval(input('Enter an x: '))\nif x % 2 == 0:\n    x = x ** 2\nelse:\n    x = x ** 3\nprint(f'new x = {x}')\n\nEnter an x:  6\n\n\nnew x = 36\n\n\n\n# Using conditional expression (ternary operator)\nx = eval(input('Enter an x: '))\nx = x ** 2 if x % 2 == 0 else x ** 3\nprint(f'new x = {x}')\n\nEnter an x:  6\n\n\nnew x = 36\n\n\n\n۲. حلقه‌ها (Loops)\n\n\nدر پایتون دو نوع حلقه داریم: for و while. - حلقه for برای تکرار روی یک مجموعه (لیست، رشته، یا رنج عددی) استفاده می‌شود. - حلقه while تا زمانی که شرط برقرار است، اجرا می‌شود.\n\n\n# for loop example\nfor i in range(5):\n    print(\"Iteration:\", i)\n\n# while loop example\ncount = 0\nwhile count &lt; 3:\n    print(\"Count is\", count)\n    count += 1\n\nIteration: 0\nIteration: 1\nIteration: 2\nIteration: 3\nIteration: 4\nCount is 0\nCount is 1\nCount is 2\n\n\n\n۳. دستور break\n\n\nبا دستور break می‌توان اجرای حلقه را قبل از اتمام کامل آن متوقف کرد.\n\n\nfor i in range(10):\n    if i == 5:\n        break\n    print(\"Value:\", i)\n\nValue: 0\nValue: 1\nValue: 2\nValue: 3\nValue: 4\n\n\n\n۴. دستور continue\n\n\nبا دستور continue می‌توان اجرای حلقه را در همان تکرار متوقف کرد و به تکرار بعدی رفت.\n\n\nfor i in range(5):\n    if i == 2:\n        continue\n    print(\"Number:\", i)\n\nNumber: 0\nNumber: 1\nNumber: 3\nNumber: 4\n\n\n\nتمرین\n\n\n۱. برنامه‌ای بنویسید که عددی از کاربر دریافت کند و بررسی کند که عدد مثبت، منفی یا صفر است.\n\n\n۲. با استفاده از حلقه for، اعداد ۱ تا ۱۰ را چاپ کنید اما وقتی عدد ۷ رسید، حلقه را با break متوقف کنید.\n\n\n۳. با استفاده از حلقه while، اعداد ۰ تا ۵ را چاپ کنید اما اگر عدد ۳ شد، با continue آن را رد کنید و چاپ نشود."
  },
  {
    "objectID": "Notebooks/sec3_operators.html",
    "href": "Notebooks/sec3_operators.html",
    "title": "",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس سوم: عملگرها در پایتون&lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nانواع عملگرها در پایتون\n\n\nدر برنامه‌نویسی، عملگرها (Operators) نمادهایی هستند که برای انجام عملیات خاصی روی داده‌ها استفاده می‌شوند. در پایتون عملگرهای مختلفی وجود دارند که به دسته‌های گوناگون تقسیم می‌شوند.\n\n\n۱. عملگرهای ریاضی (Arithmetic Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\n+\n\n\nجمع\n\n\n5 + 2 = 7\n\n\n\n\n-\n\n\nتفریق\n\n\n5 - 2 = 3\n\n\n\n\n*\n\n\nضرب\n\n\n5 * 2 = 10\n\n\n\n\n/\n\n\nتقسیم\n\n\n5 / 2 = 2.5\n\n\n\n\n%\n\n\nباقیمانده\n\n\n5 % 2 = 1\n\n\n\n\n**\n\n\nتوان\n\n\n5 ** 2 = 25\n\n\n\n\n//\n\n\nتقسیم صحیح\n\n\n5 // 2 = 2\n\n\n\n\na = 10\nb = 3\n\nprint(\"جمع:\", a + b)       # 13\nprint(\"تفریق:\", a - b)    # 7\nprint(\"ضرب:\", a * b)      # 30\nprint(\"تقسیم:\", a / b)    # 3.333...\nprint(\"باقیمانده:\", a % b)  # 1\nprint(\"توان:\", a ** b)    # 1000\nprint(\"تقسیم صحیح:\", a // b)  # 3\n\nجمع: 13\nتفریق: 7\nضرب: 30\nتقسیم: 3.3333333333333335\nباقیمانده: 1\nتوان: 1000\nتقسیم صحیح: 3\n\n\n\n۲. عملگرهای مقایسه‌ای (Comparison Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\n==\n\n\nمساوی\n\n\n5 == 5 → True\n\n\n\n\n!=\n\n\nنامساوی\n\n\n5 != 3 → True\n\n\n\n\n\n\n\nبزرگتر\n\n\n5 &gt; 3 → True\n\n\n\n\n&lt;\n\n\nکوچکتر\n\n\n5 &lt; 3 → False\n\n\n\n\n\n=\n\n\nبزرگتر یا مساوی\n\n\n5 &gt;= 5 → True\n\n\n\n\n&lt;=\n\n\nکوچکتر یا مساوی\n\n\n3 &lt;= 5 → True\n\n\n\n\n\n\nx = 5\ny = 10\nprint(x == y)\nprint(x &lt; y)\n\nFalse\nTrue\n\n\n\n۳. عملگرهای منطقی (Logical Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\nand\n\n\nو (هر دو درست باشند)\n\n\nTrue and False → False\n\n\n\n\nor\n\n\nیا (یکی درست باشد)\n\n\nTrue or False → True\n\n\n\n\nnot\n\n\nنفی\n\n\nnot True → False\n\n\n\n\na = True\nb = False\nprint(a and b)\nprint(not a)\n\nFalse\nFalse\n\n\n\n۴. عملگرهای انتسابی (Assignment Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\n=\n\n\nانتساب\n\n\nx = 5\n\n\n\n\n+=\n\n\nجمع و انتساب\n\n\nx += 3 → x = x + 3\n\n\n\n\n-=\n\n\nتفریق و انتساب\n\n\nx -= 2 → x = x - 2\n\n\n\n\n*=\n\n\nضرب و انتساب\n\n\nx = 2 → x = x  2\n\n\n\n\n/=\n\n\nتقسیم و انتساب\n\n\nx /= 2 → x = x / 2\n\n\n\n\nx = 10\nx += 5\nprint(x)\n\n15\n\n\n\n۵. عملگرهای عضویت (Membership Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\nin\n\n\nوجود داشتن\n\n\n3 in [1,2,3] → True\n\n\n\n\nnot in\n\n\nوجود نداشتن\n\n\n5 not in [1,2,3] → True\n\n\n\n\nlst = [1, 2, 3]\nprint(2 in lst)\nprint(4 not in lst)\n\nTrue\nTrue\n\n\n\n۶. عملگرهای بیتی (Bitwise Operators)\n\n\n\n\nعملگر\n\n\nتوضیح\n\n\nمثال\n\n\n\n\n&\n\n\nAND بیتی\n\n\n6 & 3 = 2\n\n\n\n\n|\n\n\nOR بیتی\n\n\n6 | 3 = 7\n\n\n\n\n^\n\n\nXOR بیتی\n\n\n6 ^ 3 = 5\n\n\n\n\n~\n\n\nNOT بیتی\n\n\n~6 = -7\n\n\n\n\n&lt;&lt;\n\n\nشیفت به چپ\n\n\n6 &lt;&lt; 1 = 12\n\n\n\n\n\n\n\n\nشیفت به راست\n\n\n6 &gt;&gt; 1 = 3\n\n\n\n\n\n\na = 6\nb = 3\nprint(a & b)\nprint(a &lt;&lt; 1)\n\n2\n12\n\n\n\nتمرین\n\n\n۱. برنامه‌ای بنویسید که از کاربر دو عدد دریافت کند و نتایج چهار عمل اصلی را نمایش دهد.\n\n\n۲. لیستی از اعداد بسازید و بررسی کنید که آیا عدد ۱۰ در آن وجود دارد یا خیر.\n\n\n۳. متغیری به نام x تعریف کنید و با استفاده از عملگرهای انتسابی مقدار آن را تغییر دهید.\n\n\n۴. دو عدد انتخاب کنید و عملیات بیتی (&، |، ^) را روی آن‌ها انجام دهید.\n\n```"
  },
  {
    "objectID": "index.html#پیشنیازها",
    "href": "index.html#پیشنیازها",
    "title": "برنامه‌نویسی پایتون",
    "section": "🛠 پیش‌نیازها",
    "text": "🛠 پیش‌نیازها\nبرای اجرای فایل‌ها از دستورات زیر استفاده کنید:\npip install -r requirements.txt"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Notebooks/sec1_setup_intro.html",
    "href": "Notebooks/sec1_setup_intro.html",
    "title": "",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p&gt;&lt;/p&gt;\n            &lt;p&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس اول: نصب و معرفی محیط&lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\n\nبرای برنامه نویسی پایتون بهتر است سه مرحله زیر را انجام دهید:\n\n\n\nنصب برنامه پایتون\n\n\nنصب Jupyter Notebook\n\n\nنصب یک IDE\n\n\n\n\n\n\n۱. نصب پایتون\n\n\nبرای نصب Python به وب‌سایت رسمی Python بروید و نسخه‌ی آخر Python 3 را دانلود و نصب کنید.\n\n\n\n✔ در ویندوز، گزینه “Add Python to PATH” را فعال کنید.\n\n&lt;img src=\"images/win_installer.png\"&gt;\n\nپس از نصب، دستور زیر را برای اطمینان اجرا کنید. برای اینکار در پنجره ترمینال ویندوز تایپ کنید:\n\n\n\npython –version\n\n\n۲. نصب Jupyter Notebook\n\n\nبرای نصب Jupyter از دستور زیر در ترمینال استفاده کنید:\n\n\npip install notebook\njupyter-lab\n\n\n۳. نصب VS Code\n\n\nبرای کدنویسی بهتر، Visual Studio Code را از اینجا نصب کنید و افزونه Python را فعال نمایید. نرم‌افزار Virtual Studio Code، محیطی عالی و یکپارچه را برای توسعه کدهای پایتون فراهم کرده است. کار با این نرم‌افزار ساده‌ است و همراه خود ویژگی‌های درونی زیادی را ارائه می‌دهد که باعث ارتقای کیفیت تجربه برنامه نویسی و توسعه‌دهندگی می‌شود.\n\n\n\n\nساختار فایل‌های پایتون\n\n\nدو فرمت اصلی:\n\n\n\n.py برای فایل‌های متنی ساده\n\n\n.ipynb برای نوت‌بوک‌های تعاملی\n\n\n\n\n# hello.py\nname = input(\"نام شما چیست؟ \")\nprint(f\"سلام {name}!\")\n\nنام شما چیست؟  Hossein\n\n\nسلام Hossein!\n\n\n\nx = 10\ny = 7\n\n\nx + y\n\n17\n\n\n\n\n🎯 جمع‌بندی\n\n\n\n✔ نصب Python و VS Code\n\n\n✔ آشنایی با Jupyter و Google Colab\n\n\n✔ اجرای اولین کد پایتون"
  },
  {
    "objectID": "Notebooks/sec4_input_output.html",
    "href": "Notebooks/sec4_input_output.html",
    "title": "",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس چهارم: ورودی‌ها و خروجی‌ها در پایتون&lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nدر برنامه‌نویسی، یکی از مهم‌ترین بخش‌ها ورودی و خروجی است. ما باید بتوانیم از کاربر داده دریافت کنیم و نتیجه را به او نمایش دهیم. در پایتون چند روش ساده برای انجام این کار وجود دارد.\n\n\n۱. تابع input()\n\n\nتابع input() برای دریافت داده از کاربر استفاده می‌شود. هر چیزی که کاربر وارد کند به صورت رشته (string) دریافت می‌شود.\n\n\nname = input(\"لطفاً نام خود را وارد کنید: \")\nprint(\"سلام،\", name)\n\nلطفاً نام خود را وارد کنید:  حسین\n\n\nسلام، حسین\n\n\n\nاگر بخواهیم عدد دریافت کنیم، باید رشته را به نوع عددی تبدیل کنیم:\n\n\nage = int(input(\"سن خود را وارد کنید: \"))\nprint(\"شما\", age, \"سال دارید.\")\n\nسن خود را وارد کنید:  44\n\n\nشما 44 سال دارید.\n\n\n\n۲. تابع print()\n\n\nتابع print() برای نمایش خروجی در کنسول استفاده می‌شود. می‌توان چند مقدار را با کاما جدا کرد یا متن و متغیر را با هم چاپ کرد.\n\n\na = 5\nb = 10\nprint(\"جمع a و b برابر است با:\", a + b)\n\nجمع a و b برابر است با: 15\n\n\n\n۳. f-string\n\n\nاز نسخه‌ی پایتون ۳.۶ به بعد، می‌توانیم از f-string برای ترکیب متن و متغیرها به صورت ساده و خوانا استفاده کنیم.\n\n\nname = \"علی\"\nage = 25\nprint(f\"سلام {name}! شما {age} ساله هستید.\")\n\nسلام علی! شما 25 ساله هستید.\n\n\n\n۴. متد format()\n\n\nروش قدیمی‌تر برای درج متغیر در متن، استفاده از متد format() است.\n\n\nname = \"زهرا\"\nage = 30\nprint(\"سلام {}! شما {} ساله هستید.\".format(name, age))\n\nسلام زهرا! شما 30 ساله هستید.\n\n\n\nتمرین\n\n\n۱. برنامه‌ای بنویسید که نام و سن کاربر را دریافت کند و پیامی مانند “سلام [نام]! شما [سن] ساله هستید.” چاپ کند.\n\n\n۲. برنامه‌ای بسازید که دو عدد از کاربر دریافت کرده و مجموع آن‌ها را نمایش دهد.\n\n\n۳. از f-string و متد format() برای نمایش یک جمله با حداقل دو متغیر مختلف استفاده کنید و خروجی را مقایسه کنید."
  },
  {
    "objectID": "Notebooks/sec6_Functions.html",
    "href": "Notebooks/sec6_Functions.html",
    "title": "",
    "section": "",
    "text": "&lt;font face=\"Zar_Bd.ttf\" size=5&gt;\n    &lt;div align=center&gt;\n        &lt;font face=\"IranNastaliq\" size=10&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\n            &lt;p dir=\"rtl\" style=\"text-align: justify;\"&gt;&lt;/p&gt;\nبه نام خدا\n\n\n        &lt;/font&gt;\n           &lt;font color=#FF7500 face=\"IranNastaliq\" size=30&gt;   &lt;h3&gt;درس ششم: تعریف توابع  &lt;/h3&gt;  &lt;/font&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;style type=\"text/css\" scoped&gt;\n    p{\n    border: 1px solid #a2a9b1;background-color: #f8f9fa;display: inline-block;\n    };\n    &lt;/style&gt;\n&lt;/font&gt;\n\n\nتوابع در پایتون (Functions)\n\n\nتوابع بخش‌های مستقلی از کد هستند که یک کار مشخص را انجام می‌دهند. استفاده از توابع باعث می‌شود کد قابل فهم‌تر، کوتاه‌تر و قابل استفاده مجدد باشد.\n\n\n۱. تعریف تابع\n\n\nبرای تعریف تابع از کلمه کلیدی def استفاده می‌کنیم و پس از آن نام تابع و پرانتزهای پارامترها را می‌نویسیم. بدنه تابع با یک indentation مشخص می‌شود.\n\n\ndef greet():\n    print(\"Hello, welcome to Python functions!\")\n    \ngreet()\n\nHello, welcome to Python functions!\n\n\n\n۲. پارامترها (Parameters)\n\n\nتوابع می‌توانند داده‌هایی را به عنوان ورودی دریافت کنند. این داده‌ها پارامتر نامیده می‌شوند.\n\n\ndef greet_user(name):\n    print(f\"Hello, {name}!\")\n    \ngreet_user(\"Ali\")\ngreet_user(\"Zahra\")\n\nHello, Ali!\nHello, Zahra!\n\n\n\n۳. مقدار بازگشتی (Return Value)\n\n\nتوابع می‌توانند مقداری را به برنامه بازگردانند. برای این کار از دستور return استفاده می‌کنیم.\n\n\ndef add(a, b):\n    return a + b\n\nresult = add(5, 7)\nprint(\"Sum is:\", result)\n\nSum is: 12\n\n\n\n۴. استفاده از ماژول math\n\n\nپایتون کتابخانه‌ای به نام math دارد که توابع ریاضی مختلفی مانند توان، ریشه دوم، سینوس و کسینوس ارائه می‌دهد.\n\n\nimport math\n\nprint(\"Square root of 16 is:\", math.sqrt(16))\nprint(\"Cosine of 0 is:\", math.cos(0))\nprint(\"Value of pi:\", math.pi)\nprint(\"2 raised to 3:\", math.pow(2, 3))\n\nSquare root of 16 is: 4.0\nCosine of 0 is: 1.0\nValue of pi: 3.141592653589793\n2 raised to 3: 8.0\n\n\n\nتمرین\n\n\n۱. تابعی بنویسید که نام و سن کاربر را دریافت کند و پیامی مانند “سلام [نام]! شما [سن] ساله هستید.” چاپ کند.\n\n\n۲. تابعی بنویسید که دو عدد را به عنوان ورودی بگیرد و جمع، تفریق و ضرب آن‌ها را بازگرداند.\n\n\n۳. از ماژول math استفاده کنید تا تابعی بسازید که ریشه دوم یک عدد و توان آن را محاسبه کند و چاپ نماید."
  }
]